// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/endot1231/ec-backend/ent/productstock"
)

// ProductStockCreate is the builder for creating a ProductStock entity.
type ProductStockCreate struct {
	config
	mutation *ProductStockMutation
	hooks    []Hook
}

// SetDescription sets the "description" field.
func (psc *ProductStockCreate) SetDescription(s string) *ProductStockCreate {
	psc.mutation.SetDescription(s)
	return psc
}

// SetPrice sets the "price" field.
func (psc *ProductStockCreate) SetPrice(i int) *ProductStockCreate {
	psc.mutation.SetPrice(i)
	return psc
}

// SetStockQuantity sets the "stock_quantity" field.
func (psc *ProductStockCreate) SetStockQuantity(i int) *ProductStockCreate {
	psc.mutation.SetStockQuantity(i)
	return psc
}

// SetCreatedAt sets the "created_at" field.
func (psc *ProductStockCreate) SetCreatedAt(t time.Time) *ProductStockCreate {
	psc.mutation.SetCreatedAt(t)
	return psc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (psc *ProductStockCreate) SetNillableCreatedAt(t *time.Time) *ProductStockCreate {
	if t != nil {
		psc.SetCreatedAt(*t)
	}
	return psc
}

// SetUpdatedAt sets the "updated_at" field.
func (psc *ProductStockCreate) SetUpdatedAt(t time.Time) *ProductStockCreate {
	psc.mutation.SetUpdatedAt(t)
	return psc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (psc *ProductStockCreate) SetNillableUpdatedAt(t *time.Time) *ProductStockCreate {
	if t != nil {
		psc.SetUpdatedAt(*t)
	}
	return psc
}

// Mutation returns the ProductStockMutation object of the builder.
func (psc *ProductStockCreate) Mutation() *ProductStockMutation {
	return psc.mutation
}

// Save creates the ProductStock in the database.
func (psc *ProductStockCreate) Save(ctx context.Context) (*ProductStock, error) {
	psc.defaults()
	return withHooks(ctx, psc.sqlSave, psc.mutation, psc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (psc *ProductStockCreate) SaveX(ctx context.Context) *ProductStock {
	v, err := psc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (psc *ProductStockCreate) Exec(ctx context.Context) error {
	_, err := psc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (psc *ProductStockCreate) ExecX(ctx context.Context) {
	if err := psc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (psc *ProductStockCreate) defaults() {
	if _, ok := psc.mutation.CreatedAt(); !ok {
		v := productstock.DefaultCreatedAt
		psc.mutation.SetCreatedAt(v)
	}
	if _, ok := psc.mutation.UpdatedAt(); !ok {
		v := productstock.DefaultUpdatedAt
		psc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (psc *ProductStockCreate) check() error {
	if _, ok := psc.mutation.Description(); !ok {
		return &ValidationError{Name: "description", err: errors.New(`ent: missing required field "ProductStock.description"`)}
	}
	if _, ok := psc.mutation.Price(); !ok {
		return &ValidationError{Name: "price", err: errors.New(`ent: missing required field "ProductStock.price"`)}
	}
	if v, ok := psc.mutation.Price(); ok {
		if err := productstock.PriceValidator(v); err != nil {
			return &ValidationError{Name: "price", err: fmt.Errorf(`ent: validator failed for field "ProductStock.price": %w`, err)}
		}
	}
	if _, ok := psc.mutation.StockQuantity(); !ok {
		return &ValidationError{Name: "stock_quantity", err: errors.New(`ent: missing required field "ProductStock.stock_quantity"`)}
	}
	if v, ok := psc.mutation.StockQuantity(); ok {
		if err := productstock.StockQuantityValidator(v); err != nil {
			return &ValidationError{Name: "stock_quantity", err: fmt.Errorf(`ent: validator failed for field "ProductStock.stock_quantity": %w`, err)}
		}
	}
	if _, ok := psc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "ProductStock.created_at"`)}
	}
	if _, ok := psc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "ProductStock.updated_at"`)}
	}
	return nil
}

func (psc *ProductStockCreate) sqlSave(ctx context.Context) (*ProductStock, error) {
	if err := psc.check(); err != nil {
		return nil, err
	}
	_node, _spec := psc.createSpec()
	if err := sqlgraph.CreateNode(ctx, psc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	psc.mutation.id = &_node.ID
	psc.mutation.done = true
	return _node, nil
}

func (psc *ProductStockCreate) createSpec() (*ProductStock, *sqlgraph.CreateSpec) {
	var (
		_node = &ProductStock{config: psc.config}
		_spec = sqlgraph.NewCreateSpec(productstock.Table, sqlgraph.NewFieldSpec(productstock.FieldID, field.TypeInt))
	)
	if value, ok := psc.mutation.Description(); ok {
		_spec.SetField(productstock.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := psc.mutation.Price(); ok {
		_spec.SetField(productstock.FieldPrice, field.TypeInt, value)
		_node.Price = value
	}
	if value, ok := psc.mutation.StockQuantity(); ok {
		_spec.SetField(productstock.FieldStockQuantity, field.TypeInt, value)
		_node.StockQuantity = value
	}
	if value, ok := psc.mutation.CreatedAt(); ok {
		_spec.SetField(productstock.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := psc.mutation.UpdatedAt(); ok {
		_spec.SetField(productstock.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	return _node, _spec
}

// ProductStockCreateBulk is the builder for creating many ProductStock entities in bulk.
type ProductStockCreateBulk struct {
	config
	builders []*ProductStockCreate
}

// Save creates the ProductStock entities in the database.
func (pscb *ProductStockCreateBulk) Save(ctx context.Context) ([]*ProductStock, error) {
	specs := make([]*sqlgraph.CreateSpec, len(pscb.builders))
	nodes := make([]*ProductStock, len(pscb.builders))
	mutators := make([]Mutator, len(pscb.builders))
	for i := range pscb.builders {
		func(i int, root context.Context) {
			builder := pscb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ProductStockMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pscb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pscb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pscb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pscb *ProductStockCreateBulk) SaveX(ctx context.Context) []*ProductStock {
	v, err := pscb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pscb *ProductStockCreateBulk) Exec(ctx context.Context) error {
	_, err := pscb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pscb *ProductStockCreateBulk) ExecX(ctx context.Context) {
	if err := pscb.Exec(ctx); err != nil {
		panic(err)
	}
}
