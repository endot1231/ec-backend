// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/endot1231/ec-backend/ent/predicate"
	"github.com/endot1231/ec-backend/ent/shops"
)

// ShopsUpdate is the builder for updating Shops entities.
type ShopsUpdate struct {
	config
	hooks    []Hook
	mutation *ShopsMutation
}

// Where appends a list predicates to the ShopsUpdate builder.
func (su *ShopsUpdate) Where(ps ...predicate.Shops) *ShopsUpdate {
	su.mutation.Where(ps...)
	return su
}

// SetName sets the "name" field.
func (su *ShopsUpdate) SetName(s string) *ShopsUpdate {
	su.mutation.SetName(s)
	return su
}

// SetAddress sets the "address" field.
func (su *ShopsUpdate) SetAddress(s string) *ShopsUpdate {
	su.mutation.SetAddress(s)
	return su
}

// SetEmail sets the "email" field.
func (su *ShopsUpdate) SetEmail(s string) *ShopsUpdate {
	su.mutation.SetEmail(s)
	return su
}

// SetEmailVerified sets the "email_verified" field.
func (su *ShopsUpdate) SetEmailVerified(t time.Time) *ShopsUpdate {
	su.mutation.SetEmailVerified(t)
	return su
}

// SetNillableEmailVerified sets the "email_verified" field if the given value is not nil.
func (su *ShopsUpdate) SetNillableEmailVerified(t *time.Time) *ShopsUpdate {
	if t != nil {
		su.SetEmailVerified(*t)
	}
	return su
}

// ClearEmailVerified clears the value of the "email_verified" field.
func (su *ShopsUpdate) ClearEmailVerified() *ShopsUpdate {
	su.mutation.ClearEmailVerified()
	return su
}

// SetPassword sets the "password" field.
func (su *ShopsUpdate) SetPassword(s string) *ShopsUpdate {
	su.mutation.SetPassword(s)
	return su
}

// SetNillablePassword sets the "password" field if the given value is not nil.
func (su *ShopsUpdate) SetNillablePassword(s *string) *ShopsUpdate {
	if s != nil {
		su.SetPassword(*s)
	}
	return su
}

// ClearPassword clears the value of the "password" field.
func (su *ShopsUpdate) ClearPassword() *ShopsUpdate {
	su.mutation.ClearPassword()
	return su
}

// SetRememberToken sets the "remember_token" field.
func (su *ShopsUpdate) SetRememberToken(s string) *ShopsUpdate {
	su.mutation.SetRememberToken(s)
	return su
}

// SetNillableRememberToken sets the "remember_token" field if the given value is not nil.
func (su *ShopsUpdate) SetNillableRememberToken(s *string) *ShopsUpdate {
	if s != nil {
		su.SetRememberToken(*s)
	}
	return su
}

// ClearRememberToken clears the value of the "remember_token" field.
func (su *ShopsUpdate) ClearRememberToken() *ShopsUpdate {
	su.mutation.ClearRememberToken()
	return su
}

// SetCreatedAt sets the "created_at" field.
func (su *ShopsUpdate) SetCreatedAt(t time.Time) *ShopsUpdate {
	su.mutation.SetCreatedAt(t)
	return su
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (su *ShopsUpdate) SetNillableCreatedAt(t *time.Time) *ShopsUpdate {
	if t != nil {
		su.SetCreatedAt(*t)
	}
	return su
}

// SetUpdatedAt sets the "updated_at" field.
func (su *ShopsUpdate) SetUpdatedAt(t time.Time) *ShopsUpdate {
	su.mutation.SetUpdatedAt(t)
	return su
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (su *ShopsUpdate) SetNillableUpdatedAt(t *time.Time) *ShopsUpdate {
	if t != nil {
		su.SetUpdatedAt(*t)
	}
	return su
}

// SetDeletedAt sets the "deleted_at" field.
func (su *ShopsUpdate) SetDeletedAt(t time.Time) *ShopsUpdate {
	su.mutation.SetDeletedAt(t)
	return su
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (su *ShopsUpdate) SetNillableDeletedAt(t *time.Time) *ShopsUpdate {
	if t != nil {
		su.SetDeletedAt(*t)
	}
	return su
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (su *ShopsUpdate) ClearDeletedAt() *ShopsUpdate {
	su.mutation.ClearDeletedAt()
	return su
}

// Mutation returns the ShopsMutation object of the builder.
func (su *ShopsUpdate) Mutation() *ShopsMutation {
	return su.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (su *ShopsUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, su.sqlSave, su.mutation, su.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (su *ShopsUpdate) SaveX(ctx context.Context) int {
	affected, err := su.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (su *ShopsUpdate) Exec(ctx context.Context) error {
	_, err := su.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (su *ShopsUpdate) ExecX(ctx context.Context) {
	if err := su.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (su *ShopsUpdate) check() error {
	if v, ok := su.mutation.Email(); ok {
		if err := shops.EmailValidator(v); err != nil {
			return &ValidationError{Name: "email", err: fmt.Errorf(`ent: validator failed for field "Shops.email": %w`, err)}
		}
	}
	return nil
}

func (su *ShopsUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := su.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(shops.Table, shops.Columns, sqlgraph.NewFieldSpec(shops.FieldID, field.TypeInt))
	if ps := su.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := su.mutation.Name(); ok {
		_spec.SetField(shops.FieldName, field.TypeString, value)
	}
	if value, ok := su.mutation.Address(); ok {
		_spec.SetField(shops.FieldAddress, field.TypeString, value)
	}
	if value, ok := su.mutation.Email(); ok {
		_spec.SetField(shops.FieldEmail, field.TypeString, value)
	}
	if value, ok := su.mutation.EmailVerified(); ok {
		_spec.SetField(shops.FieldEmailVerified, field.TypeTime, value)
	}
	if su.mutation.EmailVerifiedCleared() {
		_spec.ClearField(shops.FieldEmailVerified, field.TypeTime)
	}
	if value, ok := su.mutation.Password(); ok {
		_spec.SetField(shops.FieldPassword, field.TypeString, value)
	}
	if su.mutation.PasswordCleared() {
		_spec.ClearField(shops.FieldPassword, field.TypeString)
	}
	if value, ok := su.mutation.RememberToken(); ok {
		_spec.SetField(shops.FieldRememberToken, field.TypeString, value)
	}
	if su.mutation.RememberTokenCleared() {
		_spec.ClearField(shops.FieldRememberToken, field.TypeString)
	}
	if value, ok := su.mutation.CreatedAt(); ok {
		_spec.SetField(shops.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := su.mutation.UpdatedAt(); ok {
		_spec.SetField(shops.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := su.mutation.DeletedAt(); ok {
		_spec.SetField(shops.FieldDeletedAt, field.TypeTime, value)
	}
	if su.mutation.DeletedAtCleared() {
		_spec.ClearField(shops.FieldDeletedAt, field.TypeTime)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, su.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{shops.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	su.mutation.done = true
	return n, nil
}

// ShopsUpdateOne is the builder for updating a single Shops entity.
type ShopsUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ShopsMutation
}

// SetName sets the "name" field.
func (suo *ShopsUpdateOne) SetName(s string) *ShopsUpdateOne {
	suo.mutation.SetName(s)
	return suo
}

// SetAddress sets the "address" field.
func (suo *ShopsUpdateOne) SetAddress(s string) *ShopsUpdateOne {
	suo.mutation.SetAddress(s)
	return suo
}

// SetEmail sets the "email" field.
func (suo *ShopsUpdateOne) SetEmail(s string) *ShopsUpdateOne {
	suo.mutation.SetEmail(s)
	return suo
}

// SetEmailVerified sets the "email_verified" field.
func (suo *ShopsUpdateOne) SetEmailVerified(t time.Time) *ShopsUpdateOne {
	suo.mutation.SetEmailVerified(t)
	return suo
}

// SetNillableEmailVerified sets the "email_verified" field if the given value is not nil.
func (suo *ShopsUpdateOne) SetNillableEmailVerified(t *time.Time) *ShopsUpdateOne {
	if t != nil {
		suo.SetEmailVerified(*t)
	}
	return suo
}

// ClearEmailVerified clears the value of the "email_verified" field.
func (suo *ShopsUpdateOne) ClearEmailVerified() *ShopsUpdateOne {
	suo.mutation.ClearEmailVerified()
	return suo
}

// SetPassword sets the "password" field.
func (suo *ShopsUpdateOne) SetPassword(s string) *ShopsUpdateOne {
	suo.mutation.SetPassword(s)
	return suo
}

// SetNillablePassword sets the "password" field if the given value is not nil.
func (suo *ShopsUpdateOne) SetNillablePassword(s *string) *ShopsUpdateOne {
	if s != nil {
		suo.SetPassword(*s)
	}
	return suo
}

// ClearPassword clears the value of the "password" field.
func (suo *ShopsUpdateOne) ClearPassword() *ShopsUpdateOne {
	suo.mutation.ClearPassword()
	return suo
}

// SetRememberToken sets the "remember_token" field.
func (suo *ShopsUpdateOne) SetRememberToken(s string) *ShopsUpdateOne {
	suo.mutation.SetRememberToken(s)
	return suo
}

// SetNillableRememberToken sets the "remember_token" field if the given value is not nil.
func (suo *ShopsUpdateOne) SetNillableRememberToken(s *string) *ShopsUpdateOne {
	if s != nil {
		suo.SetRememberToken(*s)
	}
	return suo
}

// ClearRememberToken clears the value of the "remember_token" field.
func (suo *ShopsUpdateOne) ClearRememberToken() *ShopsUpdateOne {
	suo.mutation.ClearRememberToken()
	return suo
}

// SetCreatedAt sets the "created_at" field.
func (suo *ShopsUpdateOne) SetCreatedAt(t time.Time) *ShopsUpdateOne {
	suo.mutation.SetCreatedAt(t)
	return suo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (suo *ShopsUpdateOne) SetNillableCreatedAt(t *time.Time) *ShopsUpdateOne {
	if t != nil {
		suo.SetCreatedAt(*t)
	}
	return suo
}

// SetUpdatedAt sets the "updated_at" field.
func (suo *ShopsUpdateOne) SetUpdatedAt(t time.Time) *ShopsUpdateOne {
	suo.mutation.SetUpdatedAt(t)
	return suo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (suo *ShopsUpdateOne) SetNillableUpdatedAt(t *time.Time) *ShopsUpdateOne {
	if t != nil {
		suo.SetUpdatedAt(*t)
	}
	return suo
}

// SetDeletedAt sets the "deleted_at" field.
func (suo *ShopsUpdateOne) SetDeletedAt(t time.Time) *ShopsUpdateOne {
	suo.mutation.SetDeletedAt(t)
	return suo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (suo *ShopsUpdateOne) SetNillableDeletedAt(t *time.Time) *ShopsUpdateOne {
	if t != nil {
		suo.SetDeletedAt(*t)
	}
	return suo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (suo *ShopsUpdateOne) ClearDeletedAt() *ShopsUpdateOne {
	suo.mutation.ClearDeletedAt()
	return suo
}

// Mutation returns the ShopsMutation object of the builder.
func (suo *ShopsUpdateOne) Mutation() *ShopsMutation {
	return suo.mutation
}

// Where appends a list predicates to the ShopsUpdate builder.
func (suo *ShopsUpdateOne) Where(ps ...predicate.Shops) *ShopsUpdateOne {
	suo.mutation.Where(ps...)
	return suo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (suo *ShopsUpdateOne) Select(field string, fields ...string) *ShopsUpdateOne {
	suo.fields = append([]string{field}, fields...)
	return suo
}

// Save executes the query and returns the updated Shops entity.
func (suo *ShopsUpdateOne) Save(ctx context.Context) (*Shops, error) {
	return withHooks(ctx, suo.sqlSave, suo.mutation, suo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (suo *ShopsUpdateOne) SaveX(ctx context.Context) *Shops {
	node, err := suo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (suo *ShopsUpdateOne) Exec(ctx context.Context) error {
	_, err := suo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suo *ShopsUpdateOne) ExecX(ctx context.Context) {
	if err := suo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (suo *ShopsUpdateOne) check() error {
	if v, ok := suo.mutation.Email(); ok {
		if err := shops.EmailValidator(v); err != nil {
			return &ValidationError{Name: "email", err: fmt.Errorf(`ent: validator failed for field "Shops.email": %w`, err)}
		}
	}
	return nil
}

func (suo *ShopsUpdateOne) sqlSave(ctx context.Context) (_node *Shops, err error) {
	if err := suo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(shops.Table, shops.Columns, sqlgraph.NewFieldSpec(shops.FieldID, field.TypeInt))
	id, ok := suo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Shops.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := suo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, shops.FieldID)
		for _, f := range fields {
			if !shops.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != shops.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := suo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := suo.mutation.Name(); ok {
		_spec.SetField(shops.FieldName, field.TypeString, value)
	}
	if value, ok := suo.mutation.Address(); ok {
		_spec.SetField(shops.FieldAddress, field.TypeString, value)
	}
	if value, ok := suo.mutation.Email(); ok {
		_spec.SetField(shops.FieldEmail, field.TypeString, value)
	}
	if value, ok := suo.mutation.EmailVerified(); ok {
		_spec.SetField(shops.FieldEmailVerified, field.TypeTime, value)
	}
	if suo.mutation.EmailVerifiedCleared() {
		_spec.ClearField(shops.FieldEmailVerified, field.TypeTime)
	}
	if value, ok := suo.mutation.Password(); ok {
		_spec.SetField(shops.FieldPassword, field.TypeString, value)
	}
	if suo.mutation.PasswordCleared() {
		_spec.ClearField(shops.FieldPassword, field.TypeString)
	}
	if value, ok := suo.mutation.RememberToken(); ok {
		_spec.SetField(shops.FieldRememberToken, field.TypeString, value)
	}
	if suo.mutation.RememberTokenCleared() {
		_spec.ClearField(shops.FieldRememberToken, field.TypeString)
	}
	if value, ok := suo.mutation.CreatedAt(); ok {
		_spec.SetField(shops.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := suo.mutation.UpdatedAt(); ok {
		_spec.SetField(shops.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := suo.mutation.DeletedAt(); ok {
		_spec.SetField(shops.FieldDeletedAt, field.TypeTime, value)
	}
	if suo.mutation.DeletedAtCleared() {
		_spec.ClearField(shops.FieldDeletedAt, field.TypeTime)
	}
	_node = &Shops{config: suo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, suo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{shops.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	suo.mutation.done = true
	return _node, nil
}
