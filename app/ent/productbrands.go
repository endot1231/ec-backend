// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/endot1231/ec-backend/ent/productbrands"
)

// ProductBrands is the model entity for the ProductBrands schema.
type ProductBrands struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt    *time.Time `json:"deleted_at,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ProductBrands) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case productbrands.FieldID:
			values[i] = new(sql.NullInt64)
		case productbrands.FieldName:
			values[i] = new(sql.NullString)
		case productbrands.FieldCreatedAt, productbrands.FieldUpdatedAt, productbrands.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ProductBrands fields.
func (pb *ProductBrands) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case productbrands.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			pb.ID = int(value.Int64)
		case productbrands.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				pb.Name = value.String
			}
		case productbrands.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				pb.CreatedAt = value.Time
			}
		case productbrands.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				pb.UpdatedAt = value.Time
			}
		case productbrands.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				pb.DeletedAt = new(time.Time)
				*pb.DeletedAt = value.Time
			}
		default:
			pb.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ProductBrands.
// This includes values selected through modifiers, order, etc.
func (pb *ProductBrands) Value(name string) (ent.Value, error) {
	return pb.selectValues.Get(name)
}

// Update returns a builder for updating this ProductBrands.
// Note that you need to call ProductBrands.Unwrap() before calling this method if this ProductBrands
// was returned from a transaction, and the transaction was committed or rolled back.
func (pb *ProductBrands) Update() *ProductBrandsUpdateOne {
	return NewProductBrandsClient(pb.config).UpdateOne(pb)
}

// Unwrap unwraps the ProductBrands entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pb *ProductBrands) Unwrap() *ProductBrands {
	_tx, ok := pb.config.driver.(*txDriver)
	if !ok {
		panic("ent: ProductBrands is not a transactional entity")
	}
	pb.config.driver = _tx.drv
	return pb
}

// String implements the fmt.Stringer.
func (pb *ProductBrands) String() string {
	var builder strings.Builder
	builder.WriteString("ProductBrands(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pb.ID))
	builder.WriteString("name=")
	builder.WriteString(pb.Name)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(pb.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(pb.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := pb.DeletedAt; v != nil {
		builder.WriteString("deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteByte(')')
	return builder.String()
}

// ProductBrandsSlice is a parsable slice of ProductBrands.
type ProductBrandsSlice []*ProductBrands
