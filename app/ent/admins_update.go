// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/endot1231/ec-backend/ent/admins"
	"github.com/endot1231/ec-backend/ent/predicate"
)

// AdminsUpdate is the builder for updating Admins entities.
type AdminsUpdate struct {
	config
	hooks    []Hook
	mutation *AdminsMutation
}

// Where appends a list predicates to the AdminsUpdate builder.
func (au *AdminsUpdate) Where(ps ...predicate.Admins) *AdminsUpdate {
	au.mutation.Where(ps...)
	return au
}

// SetName sets the "name" field.
func (au *AdminsUpdate) SetName(s string) *AdminsUpdate {
	au.mutation.SetName(s)
	return au
}

// SetEmail sets the "email" field.
func (au *AdminsUpdate) SetEmail(s string) *AdminsUpdate {
	au.mutation.SetEmail(s)
	return au
}

// SetEmailVerified sets the "email_verified" field.
func (au *AdminsUpdate) SetEmailVerified(t time.Time) *AdminsUpdate {
	au.mutation.SetEmailVerified(t)
	return au
}

// SetNillableEmailVerified sets the "email_verified" field if the given value is not nil.
func (au *AdminsUpdate) SetNillableEmailVerified(t *time.Time) *AdminsUpdate {
	if t != nil {
		au.SetEmailVerified(*t)
	}
	return au
}

// ClearEmailVerified clears the value of the "email_verified" field.
func (au *AdminsUpdate) ClearEmailVerified() *AdminsUpdate {
	au.mutation.ClearEmailVerified()
	return au
}

// SetPassword sets the "password" field.
func (au *AdminsUpdate) SetPassword(s string) *AdminsUpdate {
	au.mutation.SetPassword(s)
	return au
}

// SetRememberToken sets the "remember_token" field.
func (au *AdminsUpdate) SetRememberToken(s string) *AdminsUpdate {
	au.mutation.SetRememberToken(s)
	return au
}

// SetNillableRememberToken sets the "remember_token" field if the given value is not nil.
func (au *AdminsUpdate) SetNillableRememberToken(s *string) *AdminsUpdate {
	if s != nil {
		au.SetRememberToken(*s)
	}
	return au
}

// ClearRememberToken clears the value of the "remember_token" field.
func (au *AdminsUpdate) ClearRememberToken() *AdminsUpdate {
	au.mutation.ClearRememberToken()
	return au
}

// SetCreatedAt sets the "created_at" field.
func (au *AdminsUpdate) SetCreatedAt(t time.Time) *AdminsUpdate {
	au.mutation.SetCreatedAt(t)
	return au
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (au *AdminsUpdate) SetNillableCreatedAt(t *time.Time) *AdminsUpdate {
	if t != nil {
		au.SetCreatedAt(*t)
	}
	return au
}

// SetUpdatedAt sets the "updated_at" field.
func (au *AdminsUpdate) SetUpdatedAt(t time.Time) *AdminsUpdate {
	au.mutation.SetUpdatedAt(t)
	return au
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (au *AdminsUpdate) SetNillableUpdatedAt(t *time.Time) *AdminsUpdate {
	if t != nil {
		au.SetUpdatedAt(*t)
	}
	return au
}

// SetDeletedAt sets the "deleted_at" field.
func (au *AdminsUpdate) SetDeletedAt(t time.Time) *AdminsUpdate {
	au.mutation.SetDeletedAt(t)
	return au
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (au *AdminsUpdate) SetNillableDeletedAt(t *time.Time) *AdminsUpdate {
	if t != nil {
		au.SetDeletedAt(*t)
	}
	return au
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (au *AdminsUpdate) ClearDeletedAt() *AdminsUpdate {
	au.mutation.ClearDeletedAt()
	return au
}

// Mutation returns the AdminsMutation object of the builder.
func (au *AdminsUpdate) Mutation() *AdminsMutation {
	return au.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (au *AdminsUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, au.sqlSave, au.mutation, au.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (au *AdminsUpdate) SaveX(ctx context.Context) int {
	affected, err := au.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (au *AdminsUpdate) Exec(ctx context.Context) error {
	_, err := au.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (au *AdminsUpdate) ExecX(ctx context.Context) {
	if err := au.Exec(ctx); err != nil {
		panic(err)
	}
}

func (au *AdminsUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(admins.Table, admins.Columns, sqlgraph.NewFieldSpec(admins.FieldID, field.TypeInt))
	if ps := au.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := au.mutation.Name(); ok {
		_spec.SetField(admins.FieldName, field.TypeString, value)
	}
	if value, ok := au.mutation.Email(); ok {
		_spec.SetField(admins.FieldEmail, field.TypeString, value)
	}
	if value, ok := au.mutation.EmailVerified(); ok {
		_spec.SetField(admins.FieldEmailVerified, field.TypeTime, value)
	}
	if au.mutation.EmailVerifiedCleared() {
		_spec.ClearField(admins.FieldEmailVerified, field.TypeTime)
	}
	if value, ok := au.mutation.Password(); ok {
		_spec.SetField(admins.FieldPassword, field.TypeString, value)
	}
	if value, ok := au.mutation.RememberToken(); ok {
		_spec.SetField(admins.FieldRememberToken, field.TypeString, value)
	}
	if au.mutation.RememberTokenCleared() {
		_spec.ClearField(admins.FieldRememberToken, field.TypeString)
	}
	if value, ok := au.mutation.CreatedAt(); ok {
		_spec.SetField(admins.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := au.mutation.UpdatedAt(); ok {
		_spec.SetField(admins.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := au.mutation.DeletedAt(); ok {
		_spec.SetField(admins.FieldDeletedAt, field.TypeTime, value)
	}
	if au.mutation.DeletedAtCleared() {
		_spec.ClearField(admins.FieldDeletedAt, field.TypeTime)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, au.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{admins.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	au.mutation.done = true
	return n, nil
}

// AdminsUpdateOne is the builder for updating a single Admins entity.
type AdminsUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AdminsMutation
}

// SetName sets the "name" field.
func (auo *AdminsUpdateOne) SetName(s string) *AdminsUpdateOne {
	auo.mutation.SetName(s)
	return auo
}

// SetEmail sets the "email" field.
func (auo *AdminsUpdateOne) SetEmail(s string) *AdminsUpdateOne {
	auo.mutation.SetEmail(s)
	return auo
}

// SetEmailVerified sets the "email_verified" field.
func (auo *AdminsUpdateOne) SetEmailVerified(t time.Time) *AdminsUpdateOne {
	auo.mutation.SetEmailVerified(t)
	return auo
}

// SetNillableEmailVerified sets the "email_verified" field if the given value is not nil.
func (auo *AdminsUpdateOne) SetNillableEmailVerified(t *time.Time) *AdminsUpdateOne {
	if t != nil {
		auo.SetEmailVerified(*t)
	}
	return auo
}

// ClearEmailVerified clears the value of the "email_verified" field.
func (auo *AdminsUpdateOne) ClearEmailVerified() *AdminsUpdateOne {
	auo.mutation.ClearEmailVerified()
	return auo
}

// SetPassword sets the "password" field.
func (auo *AdminsUpdateOne) SetPassword(s string) *AdminsUpdateOne {
	auo.mutation.SetPassword(s)
	return auo
}

// SetRememberToken sets the "remember_token" field.
func (auo *AdminsUpdateOne) SetRememberToken(s string) *AdminsUpdateOne {
	auo.mutation.SetRememberToken(s)
	return auo
}

// SetNillableRememberToken sets the "remember_token" field if the given value is not nil.
func (auo *AdminsUpdateOne) SetNillableRememberToken(s *string) *AdminsUpdateOne {
	if s != nil {
		auo.SetRememberToken(*s)
	}
	return auo
}

// ClearRememberToken clears the value of the "remember_token" field.
func (auo *AdminsUpdateOne) ClearRememberToken() *AdminsUpdateOne {
	auo.mutation.ClearRememberToken()
	return auo
}

// SetCreatedAt sets the "created_at" field.
func (auo *AdminsUpdateOne) SetCreatedAt(t time.Time) *AdminsUpdateOne {
	auo.mutation.SetCreatedAt(t)
	return auo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (auo *AdminsUpdateOne) SetNillableCreatedAt(t *time.Time) *AdminsUpdateOne {
	if t != nil {
		auo.SetCreatedAt(*t)
	}
	return auo
}

// SetUpdatedAt sets the "updated_at" field.
func (auo *AdminsUpdateOne) SetUpdatedAt(t time.Time) *AdminsUpdateOne {
	auo.mutation.SetUpdatedAt(t)
	return auo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (auo *AdminsUpdateOne) SetNillableUpdatedAt(t *time.Time) *AdminsUpdateOne {
	if t != nil {
		auo.SetUpdatedAt(*t)
	}
	return auo
}

// SetDeletedAt sets the "deleted_at" field.
func (auo *AdminsUpdateOne) SetDeletedAt(t time.Time) *AdminsUpdateOne {
	auo.mutation.SetDeletedAt(t)
	return auo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (auo *AdminsUpdateOne) SetNillableDeletedAt(t *time.Time) *AdminsUpdateOne {
	if t != nil {
		auo.SetDeletedAt(*t)
	}
	return auo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (auo *AdminsUpdateOne) ClearDeletedAt() *AdminsUpdateOne {
	auo.mutation.ClearDeletedAt()
	return auo
}

// Mutation returns the AdminsMutation object of the builder.
func (auo *AdminsUpdateOne) Mutation() *AdminsMutation {
	return auo.mutation
}

// Where appends a list predicates to the AdminsUpdate builder.
func (auo *AdminsUpdateOne) Where(ps ...predicate.Admins) *AdminsUpdateOne {
	auo.mutation.Where(ps...)
	return auo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (auo *AdminsUpdateOne) Select(field string, fields ...string) *AdminsUpdateOne {
	auo.fields = append([]string{field}, fields...)
	return auo
}

// Save executes the query and returns the updated Admins entity.
func (auo *AdminsUpdateOne) Save(ctx context.Context) (*Admins, error) {
	return withHooks(ctx, auo.sqlSave, auo.mutation, auo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (auo *AdminsUpdateOne) SaveX(ctx context.Context) *Admins {
	node, err := auo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (auo *AdminsUpdateOne) Exec(ctx context.Context) error {
	_, err := auo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (auo *AdminsUpdateOne) ExecX(ctx context.Context) {
	if err := auo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (auo *AdminsUpdateOne) sqlSave(ctx context.Context) (_node *Admins, err error) {
	_spec := sqlgraph.NewUpdateSpec(admins.Table, admins.Columns, sqlgraph.NewFieldSpec(admins.FieldID, field.TypeInt))
	id, ok := auo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Admins.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := auo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, admins.FieldID)
		for _, f := range fields {
			if !admins.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != admins.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := auo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := auo.mutation.Name(); ok {
		_spec.SetField(admins.FieldName, field.TypeString, value)
	}
	if value, ok := auo.mutation.Email(); ok {
		_spec.SetField(admins.FieldEmail, field.TypeString, value)
	}
	if value, ok := auo.mutation.EmailVerified(); ok {
		_spec.SetField(admins.FieldEmailVerified, field.TypeTime, value)
	}
	if auo.mutation.EmailVerifiedCleared() {
		_spec.ClearField(admins.FieldEmailVerified, field.TypeTime)
	}
	if value, ok := auo.mutation.Password(); ok {
		_spec.SetField(admins.FieldPassword, field.TypeString, value)
	}
	if value, ok := auo.mutation.RememberToken(); ok {
		_spec.SetField(admins.FieldRememberToken, field.TypeString, value)
	}
	if auo.mutation.RememberTokenCleared() {
		_spec.ClearField(admins.FieldRememberToken, field.TypeString)
	}
	if value, ok := auo.mutation.CreatedAt(); ok {
		_spec.SetField(admins.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := auo.mutation.UpdatedAt(); ok {
		_spec.SetField(admins.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := auo.mutation.DeletedAt(); ok {
		_spec.SetField(admins.FieldDeletedAt, field.TypeTime, value)
	}
	if auo.mutation.DeletedAtCleared() {
		_spec.ClearField(admins.FieldDeletedAt, field.TypeTime)
	}
	_node = &Admins{config: auo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, auo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{admins.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	auo.mutation.done = true
	return _node, nil
}
