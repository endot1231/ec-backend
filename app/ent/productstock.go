// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/endot1231/ec-backend/ent/productstock"
)

// ProductStock is the model entity for the ProductStock schema.
type ProductStock struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// Price holds the value of the "price" field.
	Price int `json:"price,omitempty"`
	// StockQuantity holds the value of the "stock_quantity" field.
	StockQuantity int `json:"stock_quantity,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt    time.Time `json:"updated_at,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ProductStock) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case productstock.FieldID, productstock.FieldPrice, productstock.FieldStockQuantity:
			values[i] = new(sql.NullInt64)
		case productstock.FieldDescription:
			values[i] = new(sql.NullString)
		case productstock.FieldCreatedAt, productstock.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ProductStock fields.
func (ps *ProductStock) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case productstock.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ps.ID = int(value.Int64)
		case productstock.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				ps.Description = value.String
			}
		case productstock.FieldPrice:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field price", values[i])
			} else if value.Valid {
				ps.Price = int(value.Int64)
			}
		case productstock.FieldStockQuantity:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field stock_quantity", values[i])
			} else if value.Valid {
				ps.StockQuantity = int(value.Int64)
			}
		case productstock.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				ps.CreatedAt = value.Time
			}
		case productstock.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				ps.UpdatedAt = value.Time
			}
		default:
			ps.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ProductStock.
// This includes values selected through modifiers, order, etc.
func (ps *ProductStock) Value(name string) (ent.Value, error) {
	return ps.selectValues.Get(name)
}

// Update returns a builder for updating this ProductStock.
// Note that you need to call ProductStock.Unwrap() before calling this method if this ProductStock
// was returned from a transaction, and the transaction was committed or rolled back.
func (ps *ProductStock) Update() *ProductStockUpdateOne {
	return NewProductStockClient(ps.config).UpdateOne(ps)
}

// Unwrap unwraps the ProductStock entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ps *ProductStock) Unwrap() *ProductStock {
	_tx, ok := ps.config.driver.(*txDriver)
	if !ok {
		panic("ent: ProductStock is not a transactional entity")
	}
	ps.config.driver = _tx.drv
	return ps
}

// String implements the fmt.Stringer.
func (ps *ProductStock) String() string {
	var builder strings.Builder
	builder.WriteString("ProductStock(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ps.ID))
	builder.WriteString("description=")
	builder.WriteString(ps.Description)
	builder.WriteString(", ")
	builder.WriteString("price=")
	builder.WriteString(fmt.Sprintf("%v", ps.Price))
	builder.WriteString(", ")
	builder.WriteString("stock_quantity=")
	builder.WriteString(fmt.Sprintf("%v", ps.StockQuantity))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(ps.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(ps.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// ProductStocks is a parsable slice of ProductStock.
type ProductStocks []*ProductStock
