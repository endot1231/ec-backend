// Code generated by ent, DO NOT EDIT.

package products

import (
	"time"

	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the products type in the database.
	Label = "products"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldShopID holds the string denoting the shop_id field in the database.
	FieldShopID = "shop_id"
	// FieldProductCategoryID holds the string denoting the product_category_id field in the database.
	FieldProductCategoryID = "product_category_id"
	// FieldProductBrandID holds the string denoting the product_brand_id field in the database.
	FieldProductBrandID = "product_brand_id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// Table holds the table name of the products in the database.
	Table = "products"
)

// Columns holds all SQL columns for products fields.
var Columns = []string{
	FieldID,
	FieldShopID,
	FieldProductCategoryID,
	FieldProductBrandID,
	FieldName,
	FieldDescription,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldDeletedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt time.Time
	// DefaultDeletedAt holds the default value on creation for the "deleted_at" field.
	DefaultDeletedAt time.Time
)

// OrderOption defines the ordering options for the Products queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByShopID orders the results by the shop_id field.
func ByShopID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldShopID, opts...).ToFunc()
}

// ByProductCategoryID orders the results by the product_category_id field.
func ByProductCategoryID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldProductCategoryID, opts...).ToFunc()
}

// ByProductBrandID orders the results by the product_brand_id field.
func ByProductBrandID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldProductBrandID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByDeletedAt orders the results by the deleted_at field.
func ByDeletedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedAt, opts...).ToFunc()
}
