// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/endot1231/ec-backend/ent/products"
)

// ProductsCreate is the builder for creating a Products entity.
type ProductsCreate struct {
	config
	mutation *ProductsMutation
	hooks    []Hook
}

// SetShopID sets the "shop_id" field.
func (pc *ProductsCreate) SetShopID(i int64) *ProductsCreate {
	pc.mutation.SetShopID(i)
	return pc
}

// SetProductCategoryID sets the "product_category_id" field.
func (pc *ProductsCreate) SetProductCategoryID(i int64) *ProductsCreate {
	pc.mutation.SetProductCategoryID(i)
	return pc
}

// SetProductBrandID sets the "product_brand_id" field.
func (pc *ProductsCreate) SetProductBrandID(i int64) *ProductsCreate {
	pc.mutation.SetProductBrandID(i)
	return pc
}

// SetName sets the "name" field.
func (pc *ProductsCreate) SetName(s string) *ProductsCreate {
	pc.mutation.SetName(s)
	return pc
}

// SetDescription sets the "description" field.
func (pc *ProductsCreate) SetDescription(s string) *ProductsCreate {
	pc.mutation.SetDescription(s)
	return pc
}

// SetCreatedAt sets the "created_at" field.
func (pc *ProductsCreate) SetCreatedAt(t time.Time) *ProductsCreate {
	pc.mutation.SetCreatedAt(t)
	return pc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pc *ProductsCreate) SetNillableCreatedAt(t *time.Time) *ProductsCreate {
	if t != nil {
		pc.SetCreatedAt(*t)
	}
	return pc
}

// SetUpdatedAt sets the "updated_at" field.
func (pc *ProductsCreate) SetUpdatedAt(t time.Time) *ProductsCreate {
	pc.mutation.SetUpdatedAt(t)
	return pc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (pc *ProductsCreate) SetNillableUpdatedAt(t *time.Time) *ProductsCreate {
	if t != nil {
		pc.SetUpdatedAt(*t)
	}
	return pc
}

// SetDeletedAt sets the "deleted_at" field.
func (pc *ProductsCreate) SetDeletedAt(t time.Time) *ProductsCreate {
	pc.mutation.SetDeletedAt(t)
	return pc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (pc *ProductsCreate) SetNillableDeletedAt(t *time.Time) *ProductsCreate {
	if t != nil {
		pc.SetDeletedAt(*t)
	}
	return pc
}

// Mutation returns the ProductsMutation object of the builder.
func (pc *ProductsCreate) Mutation() *ProductsMutation {
	return pc.mutation
}

// Save creates the Products in the database.
func (pc *ProductsCreate) Save(ctx context.Context) (*Products, error) {
	pc.defaults()
	return withHooks(ctx, pc.sqlSave, pc.mutation, pc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (pc *ProductsCreate) SaveX(ctx context.Context) *Products {
	v, err := pc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pc *ProductsCreate) Exec(ctx context.Context) error {
	_, err := pc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pc *ProductsCreate) ExecX(ctx context.Context) {
	if err := pc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pc *ProductsCreate) defaults() {
	if _, ok := pc.mutation.CreatedAt(); !ok {
		v := products.DefaultCreatedAt
		pc.mutation.SetCreatedAt(v)
	}
	if _, ok := pc.mutation.UpdatedAt(); !ok {
		v := products.DefaultUpdatedAt
		pc.mutation.SetUpdatedAt(v)
	}
	if _, ok := pc.mutation.DeletedAt(); !ok {
		v := products.DefaultDeletedAt
		pc.mutation.SetDeletedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pc *ProductsCreate) check() error {
	if _, ok := pc.mutation.ShopID(); !ok {
		return &ValidationError{Name: "shop_id", err: errors.New(`ent: missing required field "Products.shop_id"`)}
	}
	if _, ok := pc.mutation.ProductCategoryID(); !ok {
		return &ValidationError{Name: "product_category_id", err: errors.New(`ent: missing required field "Products.product_category_id"`)}
	}
	if _, ok := pc.mutation.ProductBrandID(); !ok {
		return &ValidationError{Name: "product_brand_id", err: errors.New(`ent: missing required field "Products.product_brand_id"`)}
	}
	if _, ok := pc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Products.name"`)}
	}
	if _, ok := pc.mutation.Description(); !ok {
		return &ValidationError{Name: "description", err: errors.New(`ent: missing required field "Products.description"`)}
	}
	if _, ok := pc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Products.created_at"`)}
	}
	if _, ok := pc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Products.updated_at"`)}
	}
	return nil
}

func (pc *ProductsCreate) sqlSave(ctx context.Context) (*Products, error) {
	if err := pc.check(); err != nil {
		return nil, err
	}
	_node, _spec := pc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	pc.mutation.id = &_node.ID
	pc.mutation.done = true
	return _node, nil
}

func (pc *ProductsCreate) createSpec() (*Products, *sqlgraph.CreateSpec) {
	var (
		_node = &Products{config: pc.config}
		_spec = sqlgraph.NewCreateSpec(products.Table, sqlgraph.NewFieldSpec(products.FieldID, field.TypeInt))
	)
	if value, ok := pc.mutation.ShopID(); ok {
		_spec.SetField(products.FieldShopID, field.TypeInt64, value)
		_node.ShopID = value
	}
	if value, ok := pc.mutation.ProductCategoryID(); ok {
		_spec.SetField(products.FieldProductCategoryID, field.TypeInt64, value)
		_node.ProductCategoryID = value
	}
	if value, ok := pc.mutation.ProductBrandID(); ok {
		_spec.SetField(products.FieldProductBrandID, field.TypeInt64, value)
		_node.ProductBrandID = value
	}
	if value, ok := pc.mutation.Name(); ok {
		_spec.SetField(products.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := pc.mutation.Description(); ok {
		_spec.SetField(products.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := pc.mutation.CreatedAt(); ok {
		_spec.SetField(products.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := pc.mutation.UpdatedAt(); ok {
		_spec.SetField(products.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := pc.mutation.DeletedAt(); ok {
		_spec.SetField(products.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = &value
	}
	return _node, _spec
}

// ProductsCreateBulk is the builder for creating many Products entities in bulk.
type ProductsCreateBulk struct {
	config
	builders []*ProductsCreate
}

// Save creates the Products entities in the database.
func (pcb *ProductsCreateBulk) Save(ctx context.Context) ([]*Products, error) {
	specs := make([]*sqlgraph.CreateSpec, len(pcb.builders))
	nodes := make([]*Products, len(pcb.builders))
	mutators := make([]Mutator, len(pcb.builders))
	for i := range pcb.builders {
		func(i int, root context.Context) {
			builder := pcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ProductsMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pcb *ProductsCreateBulk) SaveX(ctx context.Context) []*Products {
	v, err := pcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pcb *ProductsCreateBulk) Exec(ctx context.Context) error {
	_, err := pcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pcb *ProductsCreateBulk) ExecX(ctx context.Context) {
	if err := pcb.Exec(ctx); err != nil {
		panic(err)
	}
}
