// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/endot1231/ec-backend/ent/predicate"
	"github.com/endot1231/ec-backend/ent/productstock"
)

// ProductStockUpdate is the builder for updating ProductStock entities.
type ProductStockUpdate struct {
	config
	hooks    []Hook
	mutation *ProductStockMutation
}

// Where appends a list predicates to the ProductStockUpdate builder.
func (psu *ProductStockUpdate) Where(ps ...predicate.ProductStock) *ProductStockUpdate {
	psu.mutation.Where(ps...)
	return psu
}

// SetDescription sets the "description" field.
func (psu *ProductStockUpdate) SetDescription(s string) *ProductStockUpdate {
	psu.mutation.SetDescription(s)
	return psu
}

// SetPrice sets the "price" field.
func (psu *ProductStockUpdate) SetPrice(i int) *ProductStockUpdate {
	psu.mutation.ResetPrice()
	psu.mutation.SetPrice(i)
	return psu
}

// AddPrice adds i to the "price" field.
func (psu *ProductStockUpdate) AddPrice(i int) *ProductStockUpdate {
	psu.mutation.AddPrice(i)
	return psu
}

// SetStockQuantity sets the "stock_quantity" field.
func (psu *ProductStockUpdate) SetStockQuantity(i int) *ProductStockUpdate {
	psu.mutation.ResetStockQuantity()
	psu.mutation.SetStockQuantity(i)
	return psu
}

// AddStockQuantity adds i to the "stock_quantity" field.
func (psu *ProductStockUpdate) AddStockQuantity(i int) *ProductStockUpdate {
	psu.mutation.AddStockQuantity(i)
	return psu
}

// SetCreatedAt sets the "created_at" field.
func (psu *ProductStockUpdate) SetCreatedAt(t time.Time) *ProductStockUpdate {
	psu.mutation.SetCreatedAt(t)
	return psu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (psu *ProductStockUpdate) SetNillableCreatedAt(t *time.Time) *ProductStockUpdate {
	if t != nil {
		psu.SetCreatedAt(*t)
	}
	return psu
}

// SetUpdatedAt sets the "updated_at" field.
func (psu *ProductStockUpdate) SetUpdatedAt(t time.Time) *ProductStockUpdate {
	psu.mutation.SetUpdatedAt(t)
	return psu
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (psu *ProductStockUpdate) SetNillableUpdatedAt(t *time.Time) *ProductStockUpdate {
	if t != nil {
		psu.SetUpdatedAt(*t)
	}
	return psu
}

// Mutation returns the ProductStockMutation object of the builder.
func (psu *ProductStockUpdate) Mutation() *ProductStockMutation {
	return psu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (psu *ProductStockUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, psu.sqlSave, psu.mutation, psu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (psu *ProductStockUpdate) SaveX(ctx context.Context) int {
	affected, err := psu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (psu *ProductStockUpdate) Exec(ctx context.Context) error {
	_, err := psu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (psu *ProductStockUpdate) ExecX(ctx context.Context) {
	if err := psu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (psu *ProductStockUpdate) check() error {
	if v, ok := psu.mutation.Price(); ok {
		if err := productstock.PriceValidator(v); err != nil {
			return &ValidationError{Name: "price", err: fmt.Errorf(`ent: validator failed for field "ProductStock.price": %w`, err)}
		}
	}
	if v, ok := psu.mutation.StockQuantity(); ok {
		if err := productstock.StockQuantityValidator(v); err != nil {
			return &ValidationError{Name: "stock_quantity", err: fmt.Errorf(`ent: validator failed for field "ProductStock.stock_quantity": %w`, err)}
		}
	}
	return nil
}

func (psu *ProductStockUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := psu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(productstock.Table, productstock.Columns, sqlgraph.NewFieldSpec(productstock.FieldID, field.TypeInt))
	if ps := psu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := psu.mutation.Description(); ok {
		_spec.SetField(productstock.FieldDescription, field.TypeString, value)
	}
	if value, ok := psu.mutation.Price(); ok {
		_spec.SetField(productstock.FieldPrice, field.TypeInt, value)
	}
	if value, ok := psu.mutation.AddedPrice(); ok {
		_spec.AddField(productstock.FieldPrice, field.TypeInt, value)
	}
	if value, ok := psu.mutation.StockQuantity(); ok {
		_spec.SetField(productstock.FieldStockQuantity, field.TypeInt, value)
	}
	if value, ok := psu.mutation.AddedStockQuantity(); ok {
		_spec.AddField(productstock.FieldStockQuantity, field.TypeInt, value)
	}
	if value, ok := psu.mutation.CreatedAt(); ok {
		_spec.SetField(productstock.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := psu.mutation.UpdatedAt(); ok {
		_spec.SetField(productstock.FieldUpdatedAt, field.TypeTime, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, psu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{productstock.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	psu.mutation.done = true
	return n, nil
}

// ProductStockUpdateOne is the builder for updating a single ProductStock entity.
type ProductStockUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ProductStockMutation
}

// SetDescription sets the "description" field.
func (psuo *ProductStockUpdateOne) SetDescription(s string) *ProductStockUpdateOne {
	psuo.mutation.SetDescription(s)
	return psuo
}

// SetPrice sets the "price" field.
func (psuo *ProductStockUpdateOne) SetPrice(i int) *ProductStockUpdateOne {
	psuo.mutation.ResetPrice()
	psuo.mutation.SetPrice(i)
	return psuo
}

// AddPrice adds i to the "price" field.
func (psuo *ProductStockUpdateOne) AddPrice(i int) *ProductStockUpdateOne {
	psuo.mutation.AddPrice(i)
	return psuo
}

// SetStockQuantity sets the "stock_quantity" field.
func (psuo *ProductStockUpdateOne) SetStockQuantity(i int) *ProductStockUpdateOne {
	psuo.mutation.ResetStockQuantity()
	psuo.mutation.SetStockQuantity(i)
	return psuo
}

// AddStockQuantity adds i to the "stock_quantity" field.
func (psuo *ProductStockUpdateOne) AddStockQuantity(i int) *ProductStockUpdateOne {
	psuo.mutation.AddStockQuantity(i)
	return psuo
}

// SetCreatedAt sets the "created_at" field.
func (psuo *ProductStockUpdateOne) SetCreatedAt(t time.Time) *ProductStockUpdateOne {
	psuo.mutation.SetCreatedAt(t)
	return psuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (psuo *ProductStockUpdateOne) SetNillableCreatedAt(t *time.Time) *ProductStockUpdateOne {
	if t != nil {
		psuo.SetCreatedAt(*t)
	}
	return psuo
}

// SetUpdatedAt sets the "updated_at" field.
func (psuo *ProductStockUpdateOne) SetUpdatedAt(t time.Time) *ProductStockUpdateOne {
	psuo.mutation.SetUpdatedAt(t)
	return psuo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (psuo *ProductStockUpdateOne) SetNillableUpdatedAt(t *time.Time) *ProductStockUpdateOne {
	if t != nil {
		psuo.SetUpdatedAt(*t)
	}
	return psuo
}

// Mutation returns the ProductStockMutation object of the builder.
func (psuo *ProductStockUpdateOne) Mutation() *ProductStockMutation {
	return psuo.mutation
}

// Where appends a list predicates to the ProductStockUpdate builder.
func (psuo *ProductStockUpdateOne) Where(ps ...predicate.ProductStock) *ProductStockUpdateOne {
	psuo.mutation.Where(ps...)
	return psuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (psuo *ProductStockUpdateOne) Select(field string, fields ...string) *ProductStockUpdateOne {
	psuo.fields = append([]string{field}, fields...)
	return psuo
}

// Save executes the query and returns the updated ProductStock entity.
func (psuo *ProductStockUpdateOne) Save(ctx context.Context) (*ProductStock, error) {
	return withHooks(ctx, psuo.sqlSave, psuo.mutation, psuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (psuo *ProductStockUpdateOne) SaveX(ctx context.Context) *ProductStock {
	node, err := psuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (psuo *ProductStockUpdateOne) Exec(ctx context.Context) error {
	_, err := psuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (psuo *ProductStockUpdateOne) ExecX(ctx context.Context) {
	if err := psuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (psuo *ProductStockUpdateOne) check() error {
	if v, ok := psuo.mutation.Price(); ok {
		if err := productstock.PriceValidator(v); err != nil {
			return &ValidationError{Name: "price", err: fmt.Errorf(`ent: validator failed for field "ProductStock.price": %w`, err)}
		}
	}
	if v, ok := psuo.mutation.StockQuantity(); ok {
		if err := productstock.StockQuantityValidator(v); err != nil {
			return &ValidationError{Name: "stock_quantity", err: fmt.Errorf(`ent: validator failed for field "ProductStock.stock_quantity": %w`, err)}
		}
	}
	return nil
}

func (psuo *ProductStockUpdateOne) sqlSave(ctx context.Context) (_node *ProductStock, err error) {
	if err := psuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(productstock.Table, productstock.Columns, sqlgraph.NewFieldSpec(productstock.FieldID, field.TypeInt))
	id, ok := psuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ProductStock.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := psuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, productstock.FieldID)
		for _, f := range fields {
			if !productstock.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != productstock.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := psuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := psuo.mutation.Description(); ok {
		_spec.SetField(productstock.FieldDescription, field.TypeString, value)
	}
	if value, ok := psuo.mutation.Price(); ok {
		_spec.SetField(productstock.FieldPrice, field.TypeInt, value)
	}
	if value, ok := psuo.mutation.AddedPrice(); ok {
		_spec.AddField(productstock.FieldPrice, field.TypeInt, value)
	}
	if value, ok := psuo.mutation.StockQuantity(); ok {
		_spec.SetField(productstock.FieldStockQuantity, field.TypeInt, value)
	}
	if value, ok := psuo.mutation.AddedStockQuantity(); ok {
		_spec.AddField(productstock.FieldStockQuantity, field.TypeInt, value)
	}
	if value, ok := psuo.mutation.CreatedAt(); ok {
		_spec.SetField(productstock.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := psuo.mutation.UpdatedAt(); ok {
		_spec.SetField(productstock.FieldUpdatedAt, field.TypeTime, value)
	}
	_node = &ProductStock{config: psuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, psuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{productstock.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	psuo.mutation.done = true
	return _node, nil
}
