// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/endot1231/ec-backend/ent/predicate"
	"github.com/endot1231/ec-backend/ent/productcolors"
)

// ProductColorsUpdate is the builder for updating ProductColors entities.
type ProductColorsUpdate struct {
	config
	hooks    []Hook
	mutation *ProductColorsMutation
}

// Where appends a list predicates to the ProductColorsUpdate builder.
func (pcu *ProductColorsUpdate) Where(ps ...predicate.ProductColors) *ProductColorsUpdate {
	pcu.mutation.Where(ps...)
	return pcu
}

// SetName sets the "name" field.
func (pcu *ProductColorsUpdate) SetName(s string) *ProductColorsUpdate {
	pcu.mutation.SetName(s)
	return pcu
}

// SetCreatedAt sets the "created_at" field.
func (pcu *ProductColorsUpdate) SetCreatedAt(t time.Time) *ProductColorsUpdate {
	pcu.mutation.SetCreatedAt(t)
	return pcu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pcu *ProductColorsUpdate) SetNillableCreatedAt(t *time.Time) *ProductColorsUpdate {
	if t != nil {
		pcu.SetCreatedAt(*t)
	}
	return pcu
}

// SetUpdatedAt sets the "updated_at" field.
func (pcu *ProductColorsUpdate) SetUpdatedAt(t time.Time) *ProductColorsUpdate {
	pcu.mutation.SetUpdatedAt(t)
	return pcu
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (pcu *ProductColorsUpdate) SetNillableUpdatedAt(t *time.Time) *ProductColorsUpdate {
	if t != nil {
		pcu.SetUpdatedAt(*t)
	}
	return pcu
}

// SetDeletedAt sets the "deleted_at" field.
func (pcu *ProductColorsUpdate) SetDeletedAt(t time.Time) *ProductColorsUpdate {
	pcu.mutation.SetDeletedAt(t)
	return pcu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (pcu *ProductColorsUpdate) SetNillableDeletedAt(t *time.Time) *ProductColorsUpdate {
	if t != nil {
		pcu.SetDeletedAt(*t)
	}
	return pcu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (pcu *ProductColorsUpdate) ClearDeletedAt() *ProductColorsUpdate {
	pcu.mutation.ClearDeletedAt()
	return pcu
}

// Mutation returns the ProductColorsMutation object of the builder.
func (pcu *ProductColorsUpdate) Mutation() *ProductColorsMutation {
	return pcu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pcu *ProductColorsUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, pcu.sqlSave, pcu.mutation, pcu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pcu *ProductColorsUpdate) SaveX(ctx context.Context) int {
	affected, err := pcu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pcu *ProductColorsUpdate) Exec(ctx context.Context) error {
	_, err := pcu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pcu *ProductColorsUpdate) ExecX(ctx context.Context) {
	if err := pcu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (pcu *ProductColorsUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(productcolors.Table, productcolors.Columns, sqlgraph.NewFieldSpec(productcolors.FieldID, field.TypeInt))
	if ps := pcu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pcu.mutation.Name(); ok {
		_spec.SetField(productcolors.FieldName, field.TypeString, value)
	}
	if value, ok := pcu.mutation.CreatedAt(); ok {
		_spec.SetField(productcolors.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := pcu.mutation.UpdatedAt(); ok {
		_spec.SetField(productcolors.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := pcu.mutation.DeletedAt(); ok {
		_spec.SetField(productcolors.FieldDeletedAt, field.TypeTime, value)
	}
	if pcu.mutation.DeletedAtCleared() {
		_spec.ClearField(productcolors.FieldDeletedAt, field.TypeTime)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pcu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{productcolors.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pcu.mutation.done = true
	return n, nil
}

// ProductColorsUpdateOne is the builder for updating a single ProductColors entity.
type ProductColorsUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ProductColorsMutation
}

// SetName sets the "name" field.
func (pcuo *ProductColorsUpdateOne) SetName(s string) *ProductColorsUpdateOne {
	pcuo.mutation.SetName(s)
	return pcuo
}

// SetCreatedAt sets the "created_at" field.
func (pcuo *ProductColorsUpdateOne) SetCreatedAt(t time.Time) *ProductColorsUpdateOne {
	pcuo.mutation.SetCreatedAt(t)
	return pcuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pcuo *ProductColorsUpdateOne) SetNillableCreatedAt(t *time.Time) *ProductColorsUpdateOne {
	if t != nil {
		pcuo.SetCreatedAt(*t)
	}
	return pcuo
}

// SetUpdatedAt sets the "updated_at" field.
func (pcuo *ProductColorsUpdateOne) SetUpdatedAt(t time.Time) *ProductColorsUpdateOne {
	pcuo.mutation.SetUpdatedAt(t)
	return pcuo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (pcuo *ProductColorsUpdateOne) SetNillableUpdatedAt(t *time.Time) *ProductColorsUpdateOne {
	if t != nil {
		pcuo.SetUpdatedAt(*t)
	}
	return pcuo
}

// SetDeletedAt sets the "deleted_at" field.
func (pcuo *ProductColorsUpdateOne) SetDeletedAt(t time.Time) *ProductColorsUpdateOne {
	pcuo.mutation.SetDeletedAt(t)
	return pcuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (pcuo *ProductColorsUpdateOne) SetNillableDeletedAt(t *time.Time) *ProductColorsUpdateOne {
	if t != nil {
		pcuo.SetDeletedAt(*t)
	}
	return pcuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (pcuo *ProductColorsUpdateOne) ClearDeletedAt() *ProductColorsUpdateOne {
	pcuo.mutation.ClearDeletedAt()
	return pcuo
}

// Mutation returns the ProductColorsMutation object of the builder.
func (pcuo *ProductColorsUpdateOne) Mutation() *ProductColorsMutation {
	return pcuo.mutation
}

// Where appends a list predicates to the ProductColorsUpdate builder.
func (pcuo *ProductColorsUpdateOne) Where(ps ...predicate.ProductColors) *ProductColorsUpdateOne {
	pcuo.mutation.Where(ps...)
	return pcuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (pcuo *ProductColorsUpdateOne) Select(field string, fields ...string) *ProductColorsUpdateOne {
	pcuo.fields = append([]string{field}, fields...)
	return pcuo
}

// Save executes the query and returns the updated ProductColors entity.
func (pcuo *ProductColorsUpdateOne) Save(ctx context.Context) (*ProductColors, error) {
	return withHooks(ctx, pcuo.sqlSave, pcuo.mutation, pcuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pcuo *ProductColorsUpdateOne) SaveX(ctx context.Context) *ProductColors {
	node, err := pcuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (pcuo *ProductColorsUpdateOne) Exec(ctx context.Context) error {
	_, err := pcuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pcuo *ProductColorsUpdateOne) ExecX(ctx context.Context) {
	if err := pcuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (pcuo *ProductColorsUpdateOne) sqlSave(ctx context.Context) (_node *ProductColors, err error) {
	_spec := sqlgraph.NewUpdateSpec(productcolors.Table, productcolors.Columns, sqlgraph.NewFieldSpec(productcolors.FieldID, field.TypeInt))
	id, ok := pcuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ProductColors.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := pcuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, productcolors.FieldID)
		for _, f := range fields {
			if !productcolors.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != productcolors.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := pcuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pcuo.mutation.Name(); ok {
		_spec.SetField(productcolors.FieldName, field.TypeString, value)
	}
	if value, ok := pcuo.mutation.CreatedAt(); ok {
		_spec.SetField(productcolors.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := pcuo.mutation.UpdatedAt(); ok {
		_spec.SetField(productcolors.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := pcuo.mutation.DeletedAt(); ok {
		_spec.SetField(productcolors.FieldDeletedAt, field.TypeTime, value)
	}
	if pcuo.mutation.DeletedAtCleared() {
		_spec.ClearField(productcolors.FieldDeletedAt, field.TypeTime)
	}
	_node = &ProductColors{config: pcuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, pcuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{productcolors.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	pcuo.mutation.done = true
	return _node, nil
}
