// Code generated by SQLBoiler 4.14.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package db

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// ShopUser is an object representing the database table.
type ShopUser struct {
	ID              null.Int64  `boil:"id" json:"id,omitempty" toml:"id" yaml:"id,omitempty"`
	ShopID          null.Int64  `boil:"shop_id" json:"shop_id,omitempty" toml:"shop_id" yaml:"shop_id,omitempty"`
	Name            null.String `boil:"name" json:"name,omitempty" toml:"name" yaml:"name,omitempty"`
	Email           null.String `boil:"email" json:"email,omitempty" toml:"email" yaml:"email,omitempty"`
	EmailVerifiedAt null.String `boil:"email_verified_at" json:"email_verified_at,omitempty" toml:"email_verified_at" yaml:"email_verified_at,omitempty"`
	Password        null.String `boil:"password" json:"password,omitempty" toml:"password" yaml:"password,omitempty"`
	RememberToken   null.String `boil:"remember_token" json:"remember_token,omitempty" toml:"remember_token" yaml:"remember_token,omitempty"`
	CreatedAt       null.String `boil:"created_at" json:"created_at,omitempty" toml:"created_at" yaml:"created_at,omitempty"`
	UpdatedAt       null.String `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`
	DeletedAt       null.String `boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`

	R *shopUserR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L shopUserL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ShopUserColumns = struct {
	ID              string
	ShopID          string
	Name            string
	Email           string
	EmailVerifiedAt string
	Password        string
	RememberToken   string
	CreatedAt       string
	UpdatedAt       string
	DeletedAt       string
}{
	ID:              "id",
	ShopID:          "shop_id",
	Name:            "name",
	Email:           "email",
	EmailVerifiedAt: "email_verified_at",
	Password:        "password",
	RememberToken:   "remember_token",
	CreatedAt:       "created_at",
	UpdatedAt:       "updated_at",
	DeletedAt:       "deleted_at",
}

var ShopUserTableColumns = struct {
	ID              string
	ShopID          string
	Name            string
	Email           string
	EmailVerifiedAt string
	Password        string
	RememberToken   string
	CreatedAt       string
	UpdatedAt       string
	DeletedAt       string
}{
	ID:              "shop_users.id",
	ShopID:          "shop_users.shop_id",
	Name:            "shop_users.name",
	Email:           "shop_users.email",
	EmailVerifiedAt: "shop_users.email_verified_at",
	Password:        "shop_users.password",
	RememberToken:   "shop_users.remember_token",
	CreatedAt:       "shop_users.created_at",
	UpdatedAt:       "shop_users.updated_at",
	DeletedAt:       "shop_users.deleted_at",
}

// Generated where

var ShopUserWhere = struct {
	ID              whereHelpernull_Int64
	ShopID          whereHelpernull_Int64
	Name            whereHelpernull_String
	Email           whereHelpernull_String
	EmailVerifiedAt whereHelpernull_String
	Password        whereHelpernull_String
	RememberToken   whereHelpernull_String
	CreatedAt       whereHelpernull_String
	UpdatedAt       whereHelpernull_String
	DeletedAt       whereHelpernull_String
}{
	ID:              whereHelpernull_Int64{field: "\"shop_users\".\"id\""},
	ShopID:          whereHelpernull_Int64{field: "\"shop_users\".\"shop_id\""},
	Name:            whereHelpernull_String{field: "\"shop_users\".\"name\""},
	Email:           whereHelpernull_String{field: "\"shop_users\".\"email\""},
	EmailVerifiedAt: whereHelpernull_String{field: "\"shop_users\".\"email_verified_at\""},
	Password:        whereHelpernull_String{field: "\"shop_users\".\"password\""},
	RememberToken:   whereHelpernull_String{field: "\"shop_users\".\"remember_token\""},
	CreatedAt:       whereHelpernull_String{field: "\"shop_users\".\"created_at\""},
	UpdatedAt:       whereHelpernull_String{field: "\"shop_users\".\"updated_at\""},
	DeletedAt:       whereHelpernull_String{field: "\"shop_users\".\"deleted_at\""},
}

// ShopUserRels is where relationship names are stored.
var ShopUserRels = struct {
	Shop string
}{
	Shop: "Shop",
}

// shopUserR is where relationships are stored.
type shopUserR struct {
	Shop *Shop `boil:"Shop" json:"Shop" toml:"Shop" yaml:"Shop"`
}

// NewStruct creates a new relationship struct
func (*shopUserR) NewStruct() *shopUserR {
	return &shopUserR{}
}

func (r *shopUserR) GetShop() *Shop {
	if r == nil {
		return nil
	}
	return r.Shop
}

// shopUserL is where Load methods for each relationship are stored.
type shopUserL struct{}

var (
	shopUserAllColumns            = []string{"id", "shop_id", "name", "email", "email_verified_at", "password", "remember_token", "created_at", "updated_at", "deleted_at"}
	shopUserColumnsWithoutDefault = []string{}
	shopUserColumnsWithDefault    = []string{"id", "shop_id", "name", "email", "email_verified_at", "password", "remember_token", "created_at", "updated_at", "deleted_at"}
	shopUserPrimaryKeyColumns     = []string{"id"}
	shopUserGeneratedColumns      = []string{}
)

type (
	// ShopUserSlice is an alias for a slice of pointers to ShopUser.
	// This should almost always be used instead of []ShopUser.
	ShopUserSlice []*ShopUser
	// ShopUserHook is the signature for custom ShopUser hook methods
	ShopUserHook func(context.Context, boil.ContextExecutor, *ShopUser) error

	shopUserQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	shopUserType                 = reflect.TypeOf(&ShopUser{})
	shopUserMapping              = queries.MakeStructMapping(shopUserType)
	shopUserPrimaryKeyMapping, _ = queries.BindMapping(shopUserType, shopUserMapping, shopUserPrimaryKeyColumns)
	shopUserInsertCacheMut       sync.RWMutex
	shopUserInsertCache          = make(map[string]insertCache)
	shopUserUpdateCacheMut       sync.RWMutex
	shopUserUpdateCache          = make(map[string]updateCache)
	shopUserUpsertCacheMut       sync.RWMutex
	shopUserUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var shopUserAfterSelectHooks []ShopUserHook

var shopUserBeforeInsertHooks []ShopUserHook
var shopUserAfterInsertHooks []ShopUserHook

var shopUserBeforeUpdateHooks []ShopUserHook
var shopUserAfterUpdateHooks []ShopUserHook

var shopUserBeforeDeleteHooks []ShopUserHook
var shopUserAfterDeleteHooks []ShopUserHook

var shopUserBeforeUpsertHooks []ShopUserHook
var shopUserAfterUpsertHooks []ShopUserHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *ShopUser) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range shopUserAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *ShopUser) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range shopUserBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *ShopUser) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range shopUserAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *ShopUser) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range shopUserBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *ShopUser) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range shopUserAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *ShopUser) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range shopUserBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *ShopUser) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range shopUserAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *ShopUser) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range shopUserBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *ShopUser) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range shopUserAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddShopUserHook registers your hook function for all future operations.
func AddShopUserHook(hookPoint boil.HookPoint, shopUserHook ShopUserHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		shopUserAfterSelectHooks = append(shopUserAfterSelectHooks, shopUserHook)
	case boil.BeforeInsertHook:
		shopUserBeforeInsertHooks = append(shopUserBeforeInsertHooks, shopUserHook)
	case boil.AfterInsertHook:
		shopUserAfterInsertHooks = append(shopUserAfterInsertHooks, shopUserHook)
	case boil.BeforeUpdateHook:
		shopUserBeforeUpdateHooks = append(shopUserBeforeUpdateHooks, shopUserHook)
	case boil.AfterUpdateHook:
		shopUserAfterUpdateHooks = append(shopUserAfterUpdateHooks, shopUserHook)
	case boil.BeforeDeleteHook:
		shopUserBeforeDeleteHooks = append(shopUserBeforeDeleteHooks, shopUserHook)
	case boil.AfterDeleteHook:
		shopUserAfterDeleteHooks = append(shopUserAfterDeleteHooks, shopUserHook)
	case boil.BeforeUpsertHook:
		shopUserBeforeUpsertHooks = append(shopUserBeforeUpsertHooks, shopUserHook)
	case boil.AfterUpsertHook:
		shopUserAfterUpsertHooks = append(shopUserAfterUpsertHooks, shopUserHook)
	}
}

// One returns a single shopUser record from the query.
func (q shopUserQuery) One(ctx context.Context, exec boil.ContextExecutor) (*ShopUser, error) {
	o := &ShopUser{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "db: failed to execute a one query for shop_users")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all ShopUser records from the query.
func (q shopUserQuery) All(ctx context.Context, exec boil.ContextExecutor) (ShopUserSlice, error) {
	var o []*ShopUser

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "db: failed to assign all query results to ShopUser slice")
	}

	if len(shopUserAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all ShopUser records in the query.
func (q shopUserQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "db: failed to count shop_users rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q shopUserQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "db: failed to check if shop_users exists")
	}

	return count > 0, nil
}

// Shop pointed to by the foreign key.
func (o *ShopUser) Shop(mods ...qm.QueryMod) shopQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.ShopID),
	}

	queryMods = append(queryMods, mods...)

	return Shops(queryMods...)
}

// LoadShop allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (shopUserL) LoadShop(ctx context.Context, e boil.ContextExecutor, singular bool, maybeShopUser interface{}, mods queries.Applicator) error {
	var slice []*ShopUser
	var object *ShopUser

	if singular {
		var ok bool
		object, ok = maybeShopUser.(*ShopUser)
		if !ok {
			object = new(ShopUser)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeShopUser)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeShopUser))
			}
		}
	} else {
		s, ok := maybeShopUser.(*[]*ShopUser)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeShopUser)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeShopUser))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &shopUserR{}
		}
		if !queries.IsNil(object.ShopID) {
			args = append(args, object.ShopID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &shopUserR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ShopID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.ShopID) {
				args = append(args, obj.ShopID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`shops`),
		qm.WhereIn(`shops.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Shop")
	}

	var resultSlice []*Shop
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Shop")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for shops")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for shops")
	}

	if len(shopAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Shop = foreign
		if foreign.R == nil {
			foreign.R = &shopR{}
		}
		foreign.R.ShopUsers = append(foreign.R.ShopUsers, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.ShopID, foreign.ID) {
				local.R.Shop = foreign
				if foreign.R == nil {
					foreign.R = &shopR{}
				}
				foreign.R.ShopUsers = append(foreign.R.ShopUsers, local)
				break
			}
		}
	}

	return nil
}

// SetShop of the shopUser to the related item.
// Sets o.R.Shop to related.
// Adds o to related.R.ShopUsers.
func (o *ShopUser) SetShop(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Shop) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"shop_users\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, []string{"shop_id"}),
		strmangle.WhereClause("\"", "\"", 0, shopUserPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.ShopID, related.ID)
	if o.R == nil {
		o.R = &shopUserR{
			Shop: related,
		}
	} else {
		o.R.Shop = related
	}

	if related.R == nil {
		related.R = &shopR{
			ShopUsers: ShopUserSlice{o},
		}
	} else {
		related.R.ShopUsers = append(related.R.ShopUsers, o)
	}

	return nil
}

// RemoveShop relationship.
// Sets o.R.Shop to nil.
// Removes o from all passed in related items' relationships struct.
func (o *ShopUser) RemoveShop(ctx context.Context, exec boil.ContextExecutor, related *Shop) error {
	var err error

	queries.SetScanner(&o.ShopID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("shop_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Shop = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.ShopUsers {
		if queries.Equal(o.ShopID, ri.ShopID) {
			continue
		}

		ln := len(related.R.ShopUsers)
		if ln > 1 && i < ln-1 {
			related.R.ShopUsers[i] = related.R.ShopUsers[ln-1]
		}
		related.R.ShopUsers = related.R.ShopUsers[:ln-1]
		break
	}
	return nil
}

// ShopUsers retrieves all the records using an executor.
func ShopUsers(mods ...qm.QueryMod) shopUserQuery {
	mods = append(mods, qm.From("\"shop_users\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"shop_users\".*"})
	}

	return shopUserQuery{q}
}

// FindShopUser retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindShopUser(ctx context.Context, exec boil.ContextExecutor, iD null.Int64, selectCols ...string) (*ShopUser, error) {
	shopUserObj := &ShopUser{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"shop_users\" where \"id\"=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, shopUserObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "db: unable to select from shop_users")
	}

	if err = shopUserObj.doAfterSelectHooks(ctx, exec); err != nil {
		return shopUserObj, err
	}

	return shopUserObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *ShopUser) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("db: no shop_users provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		if queries.MustTime(o.UpdatedAt).IsZero() {
			queries.SetScanner(&o.UpdatedAt, currTime)
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(shopUserColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	shopUserInsertCacheMut.RLock()
	cache, cached := shopUserInsertCache[key]
	shopUserInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			shopUserAllColumns,
			shopUserColumnsWithDefault,
			shopUserColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(shopUserType, shopUserMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(shopUserType, shopUserMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"shop_users\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"shop_users\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "db: unable to insert into shop_users")
	}

	if !cached {
		shopUserInsertCacheMut.Lock()
		shopUserInsertCache[key] = cache
		shopUserInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the ShopUser.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *ShopUser) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	shopUserUpdateCacheMut.RLock()
	cache, cached := shopUserUpdateCache[key]
	shopUserUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			shopUserAllColumns,
			shopUserPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("db: unable to update shop_users, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"shop_users\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 0, wl),
			strmangle.WhereClause("\"", "\"", 0, shopUserPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(shopUserType, shopUserMapping, append(wl, shopUserPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to update shop_users row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db: failed to get rows affected by update for shop_users")
	}

	if !cached {
		shopUserUpdateCacheMut.Lock()
		shopUserUpdateCache[key] = cache
		shopUserUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q shopUserQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to update all for shop_users")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to retrieve rows affected for shop_users")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ShopUserSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("db: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), shopUserPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"shop_users\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, shopUserPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to update all in shopUser slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to retrieve rows affected all in update all shopUser")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *ShopUser) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("db: no shop_users provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(shopUserColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	shopUserUpsertCacheMut.RLock()
	cache, cached := shopUserUpsertCache[key]
	shopUserUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			shopUserAllColumns,
			shopUserColumnsWithDefault,
			shopUserColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			shopUserAllColumns,
			shopUserPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("db: unable to upsert shop_users, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(shopUserPrimaryKeyColumns))
			copy(conflict, shopUserPrimaryKeyColumns)
		}
		cache.query = buildUpsertQuerySQLite(dialect, "\"shop_users\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(shopUserType, shopUserMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(shopUserType, shopUserMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "db: unable to upsert shop_users")
	}

	if !cached {
		shopUserUpsertCacheMut.Lock()
		shopUserUpsertCache[key] = cache
		shopUserUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single ShopUser record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *ShopUser) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("db: no ShopUser provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), shopUserPrimaryKeyMapping)
	sql := "DELETE FROM \"shop_users\" WHERE \"id\"=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to delete from shop_users")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db: failed to get rows affected by delete for shop_users")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q shopUserQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("db: no shopUserQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to delete all from shop_users")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db: failed to get rows affected by deleteall for shop_users")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ShopUserSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(shopUserBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), shopUserPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"shop_users\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, shopUserPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to delete all from shopUser slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db: failed to get rows affected by deleteall for shop_users")
	}

	if len(shopUserAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *ShopUser) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindShopUser(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ShopUserSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ShopUserSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), shopUserPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"shop_users\".* FROM \"shop_users\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, shopUserPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "db: unable to reload all in ShopUserSlice")
	}

	*o = slice

	return nil
}

// ShopUserExists checks if the ShopUser row exists.
func ShopUserExists(ctx context.Context, exec boil.ContextExecutor, iD null.Int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"shop_users\" where \"id\"=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "db: unable to check if shop_users exists")
	}

	return exists, nil
}

// Exists checks if the ShopUser row exists.
func (o *ShopUser) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return ShopUserExists(ctx, exec, o.ID)
}
