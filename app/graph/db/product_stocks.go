// Code generated by SQLBoiler 4.14.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package db

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// ProductStock is an object representing the database table.
type ProductStock struct {
	ID             null.Int64  `boil:"id" json:"id,omitempty" toml:"id" yaml:"id,omitempty"`
	ProductID      null.Int64  `boil:"product_id" json:"product_id,omitempty" toml:"product_id" yaml:"product_id,omitempty"`
	ProductColorID null.Int64  `boil:"product_color_id" json:"product_color_id,omitempty" toml:"product_color_id" yaml:"product_color_id,omitempty"`
	ProductSizeID  null.Int64  `boil:"product_size_id" json:"product_size_id,omitempty" toml:"product_size_id" yaml:"product_size_id,omitempty"`
	Description    null.String `boil:"description" json:"description,omitempty" toml:"description" yaml:"description,omitempty"`
	Price          null.Int64  `boil:"price" json:"price,omitempty" toml:"price" yaml:"price,omitempty"`
	StockQuantity  null.Int64  `boil:"stock_quantity" json:"stock_quantity,omitempty" toml:"stock_quantity" yaml:"stock_quantity,omitempty"`
	CreatedAt      null.String `boil:"created_at" json:"created_at,omitempty" toml:"created_at" yaml:"created_at,omitempty"`
	UpdatedAt      null.String `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`

	R *productStockR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L productStockL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ProductStockColumns = struct {
	ID             string
	ProductID      string
	ProductColorID string
	ProductSizeID  string
	Description    string
	Price          string
	StockQuantity  string
	CreatedAt      string
	UpdatedAt      string
}{
	ID:             "id",
	ProductID:      "product_id",
	ProductColorID: "product_color_id",
	ProductSizeID:  "product_size_id",
	Description:    "description",
	Price:          "price",
	StockQuantity:  "stock_quantity",
	CreatedAt:      "created_at",
	UpdatedAt:      "updated_at",
}

var ProductStockTableColumns = struct {
	ID             string
	ProductID      string
	ProductColorID string
	ProductSizeID  string
	Description    string
	Price          string
	StockQuantity  string
	CreatedAt      string
	UpdatedAt      string
}{
	ID:             "product_stocks.id",
	ProductID:      "product_stocks.product_id",
	ProductColorID: "product_stocks.product_color_id",
	ProductSizeID:  "product_stocks.product_size_id",
	Description:    "product_stocks.description",
	Price:          "product_stocks.price",
	StockQuantity:  "product_stocks.stock_quantity",
	CreatedAt:      "product_stocks.created_at",
	UpdatedAt:      "product_stocks.updated_at",
}

// Generated where

var ProductStockWhere = struct {
	ID             whereHelpernull_Int64
	ProductID      whereHelpernull_Int64
	ProductColorID whereHelpernull_Int64
	ProductSizeID  whereHelpernull_Int64
	Description    whereHelpernull_String
	Price          whereHelpernull_Int64
	StockQuantity  whereHelpernull_Int64
	CreatedAt      whereHelpernull_String
	UpdatedAt      whereHelpernull_String
}{
	ID:             whereHelpernull_Int64{field: "\"product_stocks\".\"id\""},
	ProductID:      whereHelpernull_Int64{field: "\"product_stocks\".\"product_id\""},
	ProductColorID: whereHelpernull_Int64{field: "\"product_stocks\".\"product_color_id\""},
	ProductSizeID:  whereHelpernull_Int64{field: "\"product_stocks\".\"product_size_id\""},
	Description:    whereHelpernull_String{field: "\"product_stocks\".\"description\""},
	Price:          whereHelpernull_Int64{field: "\"product_stocks\".\"price\""},
	StockQuantity:  whereHelpernull_Int64{field: "\"product_stocks\".\"stock_quantity\""},
	CreatedAt:      whereHelpernull_String{field: "\"product_stocks\".\"created_at\""},
	UpdatedAt:      whereHelpernull_String{field: "\"product_stocks\".\"updated_at\""},
}

// ProductStockRels is where relationship names are stored.
var ProductStockRels = struct {
	ProductSize   string
	ProductColor  string
	Product       string
	Carts         string
	OrderDetails  string
	UserFavorites string
}{
	ProductSize:   "ProductSize",
	ProductColor:  "ProductColor",
	Product:       "Product",
	Carts:         "Carts",
	OrderDetails:  "OrderDetails",
	UserFavorites: "UserFavorites",
}

// productStockR is where relationships are stored.
type productStockR struct {
	ProductSize   *ProductSize      `boil:"ProductSize" json:"ProductSize" toml:"ProductSize" yaml:"ProductSize"`
	ProductColor  *ProductColor     `boil:"ProductColor" json:"ProductColor" toml:"ProductColor" yaml:"ProductColor"`
	Product       *Product          `boil:"Product" json:"Product" toml:"Product" yaml:"Product"`
	Carts         CartSlice         `boil:"Carts" json:"Carts" toml:"Carts" yaml:"Carts"`
	OrderDetails  OrderDetailSlice  `boil:"OrderDetails" json:"OrderDetails" toml:"OrderDetails" yaml:"OrderDetails"`
	UserFavorites UserFavoriteSlice `boil:"UserFavorites" json:"UserFavorites" toml:"UserFavorites" yaml:"UserFavorites"`
}

// NewStruct creates a new relationship struct
func (*productStockR) NewStruct() *productStockR {
	return &productStockR{}
}

func (r *productStockR) GetProductSize() *ProductSize {
	if r == nil {
		return nil
	}
	return r.ProductSize
}

func (r *productStockR) GetProductColor() *ProductColor {
	if r == nil {
		return nil
	}
	return r.ProductColor
}

func (r *productStockR) GetProduct() *Product {
	if r == nil {
		return nil
	}
	return r.Product
}

func (r *productStockR) GetCarts() CartSlice {
	if r == nil {
		return nil
	}
	return r.Carts
}

func (r *productStockR) GetOrderDetails() OrderDetailSlice {
	if r == nil {
		return nil
	}
	return r.OrderDetails
}

func (r *productStockR) GetUserFavorites() UserFavoriteSlice {
	if r == nil {
		return nil
	}
	return r.UserFavorites
}

// productStockL is where Load methods for each relationship are stored.
type productStockL struct{}

var (
	productStockAllColumns            = []string{"id", "product_id", "product_color_id", "product_size_id", "description", "price", "stock_quantity", "created_at", "updated_at"}
	productStockColumnsWithoutDefault = []string{}
	productStockColumnsWithDefault    = []string{"id", "product_id", "product_color_id", "product_size_id", "description", "price", "stock_quantity", "created_at", "updated_at"}
	productStockPrimaryKeyColumns     = []string{"id"}
	productStockGeneratedColumns      = []string{}
)

type (
	// ProductStockSlice is an alias for a slice of pointers to ProductStock.
	// This should almost always be used instead of []ProductStock.
	ProductStockSlice []*ProductStock
	// ProductStockHook is the signature for custom ProductStock hook methods
	ProductStockHook func(context.Context, boil.ContextExecutor, *ProductStock) error

	productStockQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	productStockType                 = reflect.TypeOf(&ProductStock{})
	productStockMapping              = queries.MakeStructMapping(productStockType)
	productStockPrimaryKeyMapping, _ = queries.BindMapping(productStockType, productStockMapping, productStockPrimaryKeyColumns)
	productStockInsertCacheMut       sync.RWMutex
	productStockInsertCache          = make(map[string]insertCache)
	productStockUpdateCacheMut       sync.RWMutex
	productStockUpdateCache          = make(map[string]updateCache)
	productStockUpsertCacheMut       sync.RWMutex
	productStockUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var productStockAfterSelectHooks []ProductStockHook

var productStockBeforeInsertHooks []ProductStockHook
var productStockAfterInsertHooks []ProductStockHook

var productStockBeforeUpdateHooks []ProductStockHook
var productStockAfterUpdateHooks []ProductStockHook

var productStockBeforeDeleteHooks []ProductStockHook
var productStockAfterDeleteHooks []ProductStockHook

var productStockBeforeUpsertHooks []ProductStockHook
var productStockAfterUpsertHooks []ProductStockHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *ProductStock) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productStockAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *ProductStock) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productStockBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *ProductStock) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productStockAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *ProductStock) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productStockBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *ProductStock) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productStockAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *ProductStock) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productStockBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *ProductStock) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productStockAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *ProductStock) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productStockBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *ProductStock) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productStockAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddProductStockHook registers your hook function for all future operations.
func AddProductStockHook(hookPoint boil.HookPoint, productStockHook ProductStockHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		productStockAfterSelectHooks = append(productStockAfterSelectHooks, productStockHook)
	case boil.BeforeInsertHook:
		productStockBeforeInsertHooks = append(productStockBeforeInsertHooks, productStockHook)
	case boil.AfterInsertHook:
		productStockAfterInsertHooks = append(productStockAfterInsertHooks, productStockHook)
	case boil.BeforeUpdateHook:
		productStockBeforeUpdateHooks = append(productStockBeforeUpdateHooks, productStockHook)
	case boil.AfterUpdateHook:
		productStockAfterUpdateHooks = append(productStockAfterUpdateHooks, productStockHook)
	case boil.BeforeDeleteHook:
		productStockBeforeDeleteHooks = append(productStockBeforeDeleteHooks, productStockHook)
	case boil.AfterDeleteHook:
		productStockAfterDeleteHooks = append(productStockAfterDeleteHooks, productStockHook)
	case boil.BeforeUpsertHook:
		productStockBeforeUpsertHooks = append(productStockBeforeUpsertHooks, productStockHook)
	case boil.AfterUpsertHook:
		productStockAfterUpsertHooks = append(productStockAfterUpsertHooks, productStockHook)
	}
}

// One returns a single productStock record from the query.
func (q productStockQuery) One(ctx context.Context, exec boil.ContextExecutor) (*ProductStock, error) {
	o := &ProductStock{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "db: failed to execute a one query for product_stocks")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all ProductStock records from the query.
func (q productStockQuery) All(ctx context.Context, exec boil.ContextExecutor) (ProductStockSlice, error) {
	var o []*ProductStock

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "db: failed to assign all query results to ProductStock slice")
	}

	if len(productStockAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all ProductStock records in the query.
func (q productStockQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "db: failed to count product_stocks rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q productStockQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "db: failed to check if product_stocks exists")
	}

	return count > 0, nil
}

// ProductSize pointed to by the foreign key.
func (o *ProductStock) ProductSize(mods ...qm.QueryMod) productSizeQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.ProductSizeID),
	}

	queryMods = append(queryMods, mods...)

	return ProductSizes(queryMods...)
}

// ProductColor pointed to by the foreign key.
func (o *ProductStock) ProductColor(mods ...qm.QueryMod) productColorQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.ProductColorID),
	}

	queryMods = append(queryMods, mods...)

	return ProductColors(queryMods...)
}

// Product pointed to by the foreign key.
func (o *ProductStock) Product(mods ...qm.QueryMod) productQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.ProductID),
	}

	queryMods = append(queryMods, mods...)

	return Products(queryMods...)
}

// Carts retrieves all the cart's Carts with an executor.
func (o *ProductStock) Carts(mods ...qm.QueryMod) cartQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"carts\".\"product_stock_id\"=?", o.ID),
	)

	return Carts(queryMods...)
}

// OrderDetails retrieves all the order_detail's OrderDetails with an executor.
func (o *ProductStock) OrderDetails(mods ...qm.QueryMod) orderDetailQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"order_details\".\"product_stock_id\"=?", o.ID),
	)

	return OrderDetails(queryMods...)
}

// UserFavorites retrieves all the user_favorite's UserFavorites with an executor.
func (o *ProductStock) UserFavorites(mods ...qm.QueryMod) userFavoriteQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"user_favorites\".\"product_stock_id\"=?", o.ID),
	)

	return UserFavorites(queryMods...)
}

// LoadProductSize allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (productStockL) LoadProductSize(ctx context.Context, e boil.ContextExecutor, singular bool, maybeProductStock interface{}, mods queries.Applicator) error {
	var slice []*ProductStock
	var object *ProductStock

	if singular {
		var ok bool
		object, ok = maybeProductStock.(*ProductStock)
		if !ok {
			object = new(ProductStock)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeProductStock)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeProductStock))
			}
		}
	} else {
		s, ok := maybeProductStock.(*[]*ProductStock)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeProductStock)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeProductStock))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &productStockR{}
		}
		if !queries.IsNil(object.ProductSizeID) {
			args = append(args, object.ProductSizeID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &productStockR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ProductSizeID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.ProductSizeID) {
				args = append(args, obj.ProductSizeID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`product_sizes`),
		qm.WhereIn(`product_sizes.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load ProductSize")
	}

	var resultSlice []*ProductSize
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice ProductSize")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for product_sizes")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for product_sizes")
	}

	if len(productSizeAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ProductSize = foreign
		if foreign.R == nil {
			foreign.R = &productSizeR{}
		}
		foreign.R.ProductStocks = append(foreign.R.ProductStocks, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.ProductSizeID, foreign.ID) {
				local.R.ProductSize = foreign
				if foreign.R == nil {
					foreign.R = &productSizeR{}
				}
				foreign.R.ProductStocks = append(foreign.R.ProductStocks, local)
				break
			}
		}
	}

	return nil
}

// LoadProductColor allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (productStockL) LoadProductColor(ctx context.Context, e boil.ContextExecutor, singular bool, maybeProductStock interface{}, mods queries.Applicator) error {
	var slice []*ProductStock
	var object *ProductStock

	if singular {
		var ok bool
		object, ok = maybeProductStock.(*ProductStock)
		if !ok {
			object = new(ProductStock)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeProductStock)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeProductStock))
			}
		}
	} else {
		s, ok := maybeProductStock.(*[]*ProductStock)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeProductStock)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeProductStock))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &productStockR{}
		}
		if !queries.IsNil(object.ProductColorID) {
			args = append(args, object.ProductColorID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &productStockR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ProductColorID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.ProductColorID) {
				args = append(args, obj.ProductColorID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`product_colors`),
		qm.WhereIn(`product_colors.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load ProductColor")
	}

	var resultSlice []*ProductColor
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice ProductColor")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for product_colors")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for product_colors")
	}

	if len(productColorAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ProductColor = foreign
		if foreign.R == nil {
			foreign.R = &productColorR{}
		}
		foreign.R.ProductStocks = append(foreign.R.ProductStocks, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.ProductColorID, foreign.ID) {
				local.R.ProductColor = foreign
				if foreign.R == nil {
					foreign.R = &productColorR{}
				}
				foreign.R.ProductStocks = append(foreign.R.ProductStocks, local)
				break
			}
		}
	}

	return nil
}

// LoadProduct allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (productStockL) LoadProduct(ctx context.Context, e boil.ContextExecutor, singular bool, maybeProductStock interface{}, mods queries.Applicator) error {
	var slice []*ProductStock
	var object *ProductStock

	if singular {
		var ok bool
		object, ok = maybeProductStock.(*ProductStock)
		if !ok {
			object = new(ProductStock)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeProductStock)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeProductStock))
			}
		}
	} else {
		s, ok := maybeProductStock.(*[]*ProductStock)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeProductStock)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeProductStock))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &productStockR{}
		}
		if !queries.IsNil(object.ProductID) {
			args = append(args, object.ProductID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &productStockR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ProductID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.ProductID) {
				args = append(args, obj.ProductID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`products`),
		qm.WhereIn(`products.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Product")
	}

	var resultSlice []*Product
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Product")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for products")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for products")
	}

	if len(productAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Product = foreign
		if foreign.R == nil {
			foreign.R = &productR{}
		}
		foreign.R.ProductStocks = append(foreign.R.ProductStocks, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.ProductID, foreign.ID) {
				local.R.Product = foreign
				if foreign.R == nil {
					foreign.R = &productR{}
				}
				foreign.R.ProductStocks = append(foreign.R.ProductStocks, local)
				break
			}
		}
	}

	return nil
}

// LoadCarts allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (productStockL) LoadCarts(ctx context.Context, e boil.ContextExecutor, singular bool, maybeProductStock interface{}, mods queries.Applicator) error {
	var slice []*ProductStock
	var object *ProductStock

	if singular {
		var ok bool
		object, ok = maybeProductStock.(*ProductStock)
		if !ok {
			object = new(ProductStock)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeProductStock)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeProductStock))
			}
		}
	} else {
		s, ok := maybeProductStock.(*[]*ProductStock)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeProductStock)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeProductStock))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &productStockR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &productStockR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`carts`),
		qm.WhereIn(`carts.product_stock_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load carts")
	}

	var resultSlice []*Cart
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice carts")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on carts")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for carts")
	}

	if len(cartAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Carts = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &cartR{}
			}
			foreign.R.ProductStock = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.ProductStockID) {
				local.R.Carts = append(local.R.Carts, foreign)
				if foreign.R == nil {
					foreign.R = &cartR{}
				}
				foreign.R.ProductStock = local
				break
			}
		}
	}

	return nil
}

// LoadOrderDetails allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (productStockL) LoadOrderDetails(ctx context.Context, e boil.ContextExecutor, singular bool, maybeProductStock interface{}, mods queries.Applicator) error {
	var slice []*ProductStock
	var object *ProductStock

	if singular {
		var ok bool
		object, ok = maybeProductStock.(*ProductStock)
		if !ok {
			object = new(ProductStock)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeProductStock)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeProductStock))
			}
		}
	} else {
		s, ok := maybeProductStock.(*[]*ProductStock)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeProductStock)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeProductStock))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &productStockR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &productStockR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`order_details`),
		qm.WhereIn(`order_details.product_stock_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load order_details")
	}

	var resultSlice []*OrderDetail
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice order_details")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on order_details")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for order_details")
	}

	if len(orderDetailAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.OrderDetails = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &orderDetailR{}
			}
			foreign.R.ProductStock = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.ProductStockID) {
				local.R.OrderDetails = append(local.R.OrderDetails, foreign)
				if foreign.R == nil {
					foreign.R = &orderDetailR{}
				}
				foreign.R.ProductStock = local
				break
			}
		}
	}

	return nil
}

// LoadUserFavorites allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (productStockL) LoadUserFavorites(ctx context.Context, e boil.ContextExecutor, singular bool, maybeProductStock interface{}, mods queries.Applicator) error {
	var slice []*ProductStock
	var object *ProductStock

	if singular {
		var ok bool
		object, ok = maybeProductStock.(*ProductStock)
		if !ok {
			object = new(ProductStock)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeProductStock)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeProductStock))
			}
		}
	} else {
		s, ok := maybeProductStock.(*[]*ProductStock)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeProductStock)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeProductStock))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &productStockR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &productStockR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`user_favorites`),
		qm.WhereIn(`user_favorites.product_stock_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load user_favorites")
	}

	var resultSlice []*UserFavorite
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice user_favorites")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on user_favorites")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for user_favorites")
	}

	if len(userFavoriteAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.UserFavorites = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &userFavoriteR{}
			}
			foreign.R.ProductStock = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.ProductStockID) {
				local.R.UserFavorites = append(local.R.UserFavorites, foreign)
				if foreign.R == nil {
					foreign.R = &userFavoriteR{}
				}
				foreign.R.ProductStock = local
				break
			}
		}
	}

	return nil
}

// SetProductSize of the productStock to the related item.
// Sets o.R.ProductSize to related.
// Adds o to related.R.ProductStocks.
func (o *ProductStock) SetProductSize(ctx context.Context, exec boil.ContextExecutor, insert bool, related *ProductSize) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"product_stocks\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, []string{"product_size_id"}),
		strmangle.WhereClause("\"", "\"", 0, productStockPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.ProductSizeID, related.ID)
	if o.R == nil {
		o.R = &productStockR{
			ProductSize: related,
		}
	} else {
		o.R.ProductSize = related
	}

	if related.R == nil {
		related.R = &productSizeR{
			ProductStocks: ProductStockSlice{o},
		}
	} else {
		related.R.ProductStocks = append(related.R.ProductStocks, o)
	}

	return nil
}

// RemoveProductSize relationship.
// Sets o.R.ProductSize to nil.
// Removes o from all passed in related items' relationships struct.
func (o *ProductStock) RemoveProductSize(ctx context.Context, exec boil.ContextExecutor, related *ProductSize) error {
	var err error

	queries.SetScanner(&o.ProductSizeID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("product_size_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.ProductSize = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.ProductStocks {
		if queries.Equal(o.ProductSizeID, ri.ProductSizeID) {
			continue
		}

		ln := len(related.R.ProductStocks)
		if ln > 1 && i < ln-1 {
			related.R.ProductStocks[i] = related.R.ProductStocks[ln-1]
		}
		related.R.ProductStocks = related.R.ProductStocks[:ln-1]
		break
	}
	return nil
}

// SetProductColor of the productStock to the related item.
// Sets o.R.ProductColor to related.
// Adds o to related.R.ProductStocks.
func (o *ProductStock) SetProductColor(ctx context.Context, exec boil.ContextExecutor, insert bool, related *ProductColor) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"product_stocks\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, []string{"product_color_id"}),
		strmangle.WhereClause("\"", "\"", 0, productStockPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.ProductColorID, related.ID)
	if o.R == nil {
		o.R = &productStockR{
			ProductColor: related,
		}
	} else {
		o.R.ProductColor = related
	}

	if related.R == nil {
		related.R = &productColorR{
			ProductStocks: ProductStockSlice{o},
		}
	} else {
		related.R.ProductStocks = append(related.R.ProductStocks, o)
	}

	return nil
}

// RemoveProductColor relationship.
// Sets o.R.ProductColor to nil.
// Removes o from all passed in related items' relationships struct.
func (o *ProductStock) RemoveProductColor(ctx context.Context, exec boil.ContextExecutor, related *ProductColor) error {
	var err error

	queries.SetScanner(&o.ProductColorID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("product_color_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.ProductColor = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.ProductStocks {
		if queries.Equal(o.ProductColorID, ri.ProductColorID) {
			continue
		}

		ln := len(related.R.ProductStocks)
		if ln > 1 && i < ln-1 {
			related.R.ProductStocks[i] = related.R.ProductStocks[ln-1]
		}
		related.R.ProductStocks = related.R.ProductStocks[:ln-1]
		break
	}
	return nil
}

// SetProduct of the productStock to the related item.
// Sets o.R.Product to related.
// Adds o to related.R.ProductStocks.
func (o *ProductStock) SetProduct(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Product) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"product_stocks\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, []string{"product_id"}),
		strmangle.WhereClause("\"", "\"", 0, productStockPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.ProductID, related.ID)
	if o.R == nil {
		o.R = &productStockR{
			Product: related,
		}
	} else {
		o.R.Product = related
	}

	if related.R == nil {
		related.R = &productR{
			ProductStocks: ProductStockSlice{o},
		}
	} else {
		related.R.ProductStocks = append(related.R.ProductStocks, o)
	}

	return nil
}

// RemoveProduct relationship.
// Sets o.R.Product to nil.
// Removes o from all passed in related items' relationships struct.
func (o *ProductStock) RemoveProduct(ctx context.Context, exec boil.ContextExecutor, related *Product) error {
	var err error

	queries.SetScanner(&o.ProductID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("product_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Product = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.ProductStocks {
		if queries.Equal(o.ProductID, ri.ProductID) {
			continue
		}

		ln := len(related.R.ProductStocks)
		if ln > 1 && i < ln-1 {
			related.R.ProductStocks[i] = related.R.ProductStocks[ln-1]
		}
		related.R.ProductStocks = related.R.ProductStocks[:ln-1]
		break
	}
	return nil
}

// AddCarts adds the given related objects to the existing relationships
// of the product_stock, optionally inserting them as new records.
// Appends related to o.R.Carts.
// Sets related.R.ProductStock appropriately.
func (o *ProductStock) AddCarts(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Cart) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.ProductStockID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"carts\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 0, []string{"product_stock_id"}),
				strmangle.WhereClause("\"", "\"", 0, cartPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.ProductStockID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &productStockR{
			Carts: related,
		}
	} else {
		o.R.Carts = append(o.R.Carts, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &cartR{
				ProductStock: o,
			}
		} else {
			rel.R.ProductStock = o
		}
	}
	return nil
}

// SetCarts removes all previously related items of the
// product_stock replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.ProductStock's Carts accordingly.
// Replaces o.R.Carts with related.
// Sets related.R.ProductStock's Carts accordingly.
func (o *ProductStock) SetCarts(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Cart) error {
	query := "update \"carts\" set \"product_stock_id\" = null where \"product_stock_id\" = ?"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.Carts {
			queries.SetScanner(&rel.ProductStockID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.ProductStock = nil
		}
		o.R.Carts = nil
	}

	return o.AddCarts(ctx, exec, insert, related...)
}

// RemoveCarts relationships from objects passed in.
// Removes related items from R.Carts (uses pointer comparison, removal does not keep order)
// Sets related.R.ProductStock.
func (o *ProductStock) RemoveCarts(ctx context.Context, exec boil.ContextExecutor, related ...*Cart) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.ProductStockID, nil)
		if rel.R != nil {
			rel.R.ProductStock = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("product_stock_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.Carts {
			if rel != ri {
				continue
			}

			ln := len(o.R.Carts)
			if ln > 1 && i < ln-1 {
				o.R.Carts[i] = o.R.Carts[ln-1]
			}
			o.R.Carts = o.R.Carts[:ln-1]
			break
		}
	}

	return nil
}

// AddOrderDetails adds the given related objects to the existing relationships
// of the product_stock, optionally inserting them as new records.
// Appends related to o.R.OrderDetails.
// Sets related.R.ProductStock appropriately.
func (o *ProductStock) AddOrderDetails(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*OrderDetail) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.ProductStockID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"order_details\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 0, []string{"product_stock_id"}),
				strmangle.WhereClause("\"", "\"", 0, orderDetailPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.ProductStockID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &productStockR{
			OrderDetails: related,
		}
	} else {
		o.R.OrderDetails = append(o.R.OrderDetails, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &orderDetailR{
				ProductStock: o,
			}
		} else {
			rel.R.ProductStock = o
		}
	}
	return nil
}

// SetOrderDetails removes all previously related items of the
// product_stock replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.ProductStock's OrderDetails accordingly.
// Replaces o.R.OrderDetails with related.
// Sets related.R.ProductStock's OrderDetails accordingly.
func (o *ProductStock) SetOrderDetails(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*OrderDetail) error {
	query := "update \"order_details\" set \"product_stock_id\" = null where \"product_stock_id\" = ?"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.OrderDetails {
			queries.SetScanner(&rel.ProductStockID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.ProductStock = nil
		}
		o.R.OrderDetails = nil
	}

	return o.AddOrderDetails(ctx, exec, insert, related...)
}

// RemoveOrderDetails relationships from objects passed in.
// Removes related items from R.OrderDetails (uses pointer comparison, removal does not keep order)
// Sets related.R.ProductStock.
func (o *ProductStock) RemoveOrderDetails(ctx context.Context, exec boil.ContextExecutor, related ...*OrderDetail) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.ProductStockID, nil)
		if rel.R != nil {
			rel.R.ProductStock = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("product_stock_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.OrderDetails {
			if rel != ri {
				continue
			}

			ln := len(o.R.OrderDetails)
			if ln > 1 && i < ln-1 {
				o.R.OrderDetails[i] = o.R.OrderDetails[ln-1]
			}
			o.R.OrderDetails = o.R.OrderDetails[:ln-1]
			break
		}
	}

	return nil
}

// AddUserFavorites adds the given related objects to the existing relationships
// of the product_stock, optionally inserting them as new records.
// Appends related to o.R.UserFavorites.
// Sets related.R.ProductStock appropriately.
func (o *ProductStock) AddUserFavorites(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*UserFavorite) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.ProductStockID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"user_favorites\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 0, []string{"product_stock_id"}),
				strmangle.WhereClause("\"", "\"", 0, userFavoritePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.ProductStockID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &productStockR{
			UserFavorites: related,
		}
	} else {
		o.R.UserFavorites = append(o.R.UserFavorites, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &userFavoriteR{
				ProductStock: o,
			}
		} else {
			rel.R.ProductStock = o
		}
	}
	return nil
}

// SetUserFavorites removes all previously related items of the
// product_stock replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.ProductStock's UserFavorites accordingly.
// Replaces o.R.UserFavorites with related.
// Sets related.R.ProductStock's UserFavorites accordingly.
func (o *ProductStock) SetUserFavorites(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*UserFavorite) error {
	query := "update \"user_favorites\" set \"product_stock_id\" = null where \"product_stock_id\" = ?"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.UserFavorites {
			queries.SetScanner(&rel.ProductStockID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.ProductStock = nil
		}
		o.R.UserFavorites = nil
	}

	return o.AddUserFavorites(ctx, exec, insert, related...)
}

// RemoveUserFavorites relationships from objects passed in.
// Removes related items from R.UserFavorites (uses pointer comparison, removal does not keep order)
// Sets related.R.ProductStock.
func (o *ProductStock) RemoveUserFavorites(ctx context.Context, exec boil.ContextExecutor, related ...*UserFavorite) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.ProductStockID, nil)
		if rel.R != nil {
			rel.R.ProductStock = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("product_stock_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.UserFavorites {
			if rel != ri {
				continue
			}

			ln := len(o.R.UserFavorites)
			if ln > 1 && i < ln-1 {
				o.R.UserFavorites[i] = o.R.UserFavorites[ln-1]
			}
			o.R.UserFavorites = o.R.UserFavorites[:ln-1]
			break
		}
	}

	return nil
}

// ProductStocks retrieves all the records using an executor.
func ProductStocks(mods ...qm.QueryMod) productStockQuery {
	mods = append(mods, qm.From("\"product_stocks\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"product_stocks\".*"})
	}

	return productStockQuery{q}
}

// FindProductStock retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindProductStock(ctx context.Context, exec boil.ContextExecutor, iD null.Int64, selectCols ...string) (*ProductStock, error) {
	productStockObj := &ProductStock{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"product_stocks\" where \"id\"=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, productStockObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "db: unable to select from product_stocks")
	}

	if err = productStockObj.doAfterSelectHooks(ctx, exec); err != nil {
		return productStockObj, err
	}

	return productStockObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *ProductStock) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("db: no product_stocks provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		if queries.MustTime(o.UpdatedAt).IsZero() {
			queries.SetScanner(&o.UpdatedAt, currTime)
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(productStockColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	productStockInsertCacheMut.RLock()
	cache, cached := productStockInsertCache[key]
	productStockInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			productStockAllColumns,
			productStockColumnsWithDefault,
			productStockColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(productStockType, productStockMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(productStockType, productStockMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"product_stocks\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"product_stocks\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "db: unable to insert into product_stocks")
	}

	if !cached {
		productStockInsertCacheMut.Lock()
		productStockInsertCache[key] = cache
		productStockInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the ProductStock.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *ProductStock) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	productStockUpdateCacheMut.RLock()
	cache, cached := productStockUpdateCache[key]
	productStockUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			productStockAllColumns,
			productStockPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("db: unable to update product_stocks, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"product_stocks\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 0, wl),
			strmangle.WhereClause("\"", "\"", 0, productStockPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(productStockType, productStockMapping, append(wl, productStockPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to update product_stocks row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db: failed to get rows affected by update for product_stocks")
	}

	if !cached {
		productStockUpdateCacheMut.Lock()
		productStockUpdateCache[key] = cache
		productStockUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q productStockQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to update all for product_stocks")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to retrieve rows affected for product_stocks")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ProductStockSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("db: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), productStockPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"product_stocks\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, productStockPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to update all in productStock slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to retrieve rows affected all in update all productStock")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *ProductStock) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("db: no product_stocks provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(productStockColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	productStockUpsertCacheMut.RLock()
	cache, cached := productStockUpsertCache[key]
	productStockUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			productStockAllColumns,
			productStockColumnsWithDefault,
			productStockColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			productStockAllColumns,
			productStockPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("db: unable to upsert product_stocks, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(productStockPrimaryKeyColumns))
			copy(conflict, productStockPrimaryKeyColumns)
		}
		cache.query = buildUpsertQuerySQLite(dialect, "\"product_stocks\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(productStockType, productStockMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(productStockType, productStockMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "db: unable to upsert product_stocks")
	}

	if !cached {
		productStockUpsertCacheMut.Lock()
		productStockUpsertCache[key] = cache
		productStockUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single ProductStock record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *ProductStock) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("db: no ProductStock provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), productStockPrimaryKeyMapping)
	sql := "DELETE FROM \"product_stocks\" WHERE \"id\"=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to delete from product_stocks")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db: failed to get rows affected by delete for product_stocks")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q productStockQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("db: no productStockQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to delete all from product_stocks")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db: failed to get rows affected by deleteall for product_stocks")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ProductStockSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(productStockBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), productStockPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"product_stocks\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, productStockPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to delete all from productStock slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db: failed to get rows affected by deleteall for product_stocks")
	}

	if len(productStockAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *ProductStock) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindProductStock(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ProductStockSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ProductStockSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), productStockPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"product_stocks\".* FROM \"product_stocks\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, productStockPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "db: unable to reload all in ProductStockSlice")
	}

	*o = slice

	return nil
}

// ProductStockExists checks if the ProductStock row exists.
func ProductStockExists(ctx context.Context, exec boil.ContextExecutor, iD null.Int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"product_stocks\" where \"id\"=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "db: unable to check if product_stocks exists")
	}

	return exists, nil
}

// Exists checks if the ProductStock row exists.
func (o *ProductStock) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return ProductStockExists(ctx, exec, o.ID)
}
