// Code generated by SQLBoiler 4.14.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package db

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// ProductBrand is an object representing the database table.
type ProductBrand struct {
	ID   null.Int64  `boil:"id" json:"id,omitempty" toml:"id" yaml:"id,omitempty"`
	Name null.String `boil:"name" json:"name,omitempty" toml:"name" yaml:"name,omitempty"`

	R *productBrandR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L productBrandL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ProductBrandColumns = struct {
	ID   string
	Name string
}{
	ID:   "id",
	Name: "name",
}

var ProductBrandTableColumns = struct {
	ID   string
	Name string
}{
	ID:   "product_brands.id",
	Name: "product_brands.name",
}

// Generated where

var ProductBrandWhere = struct {
	ID   whereHelpernull_Int64
	Name whereHelpernull_String
}{
	ID:   whereHelpernull_Int64{field: "\"product_brands\".\"id\""},
	Name: whereHelpernull_String{field: "\"product_brands\".\"name\""},
}

// ProductBrandRels is where relationship names are stored.
var ProductBrandRels = struct {
	Products string
}{
	Products: "Products",
}

// productBrandR is where relationships are stored.
type productBrandR struct {
	Products ProductSlice `boil:"Products" json:"Products" toml:"Products" yaml:"Products"`
}

// NewStruct creates a new relationship struct
func (*productBrandR) NewStruct() *productBrandR {
	return &productBrandR{}
}

func (r *productBrandR) GetProducts() ProductSlice {
	if r == nil {
		return nil
	}
	return r.Products
}

// productBrandL is where Load methods for each relationship are stored.
type productBrandL struct{}

var (
	productBrandAllColumns            = []string{"id", "name"}
	productBrandColumnsWithoutDefault = []string{}
	productBrandColumnsWithDefault    = []string{"id", "name"}
	productBrandPrimaryKeyColumns     = []string{"id"}
	productBrandGeneratedColumns      = []string{}
)

type (
	// ProductBrandSlice is an alias for a slice of pointers to ProductBrand.
	// This should almost always be used instead of []ProductBrand.
	ProductBrandSlice []*ProductBrand
	// ProductBrandHook is the signature for custom ProductBrand hook methods
	ProductBrandHook func(context.Context, boil.ContextExecutor, *ProductBrand) error

	productBrandQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	productBrandType                 = reflect.TypeOf(&ProductBrand{})
	productBrandMapping              = queries.MakeStructMapping(productBrandType)
	productBrandPrimaryKeyMapping, _ = queries.BindMapping(productBrandType, productBrandMapping, productBrandPrimaryKeyColumns)
	productBrandInsertCacheMut       sync.RWMutex
	productBrandInsertCache          = make(map[string]insertCache)
	productBrandUpdateCacheMut       sync.RWMutex
	productBrandUpdateCache          = make(map[string]updateCache)
	productBrandUpsertCacheMut       sync.RWMutex
	productBrandUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var productBrandAfterSelectHooks []ProductBrandHook

var productBrandBeforeInsertHooks []ProductBrandHook
var productBrandAfterInsertHooks []ProductBrandHook

var productBrandBeforeUpdateHooks []ProductBrandHook
var productBrandAfterUpdateHooks []ProductBrandHook

var productBrandBeforeDeleteHooks []ProductBrandHook
var productBrandAfterDeleteHooks []ProductBrandHook

var productBrandBeforeUpsertHooks []ProductBrandHook
var productBrandAfterUpsertHooks []ProductBrandHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *ProductBrand) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productBrandAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *ProductBrand) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productBrandBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *ProductBrand) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productBrandAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *ProductBrand) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productBrandBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *ProductBrand) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productBrandAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *ProductBrand) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productBrandBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *ProductBrand) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productBrandAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *ProductBrand) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productBrandBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *ProductBrand) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productBrandAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddProductBrandHook registers your hook function for all future operations.
func AddProductBrandHook(hookPoint boil.HookPoint, productBrandHook ProductBrandHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		productBrandAfterSelectHooks = append(productBrandAfterSelectHooks, productBrandHook)
	case boil.BeforeInsertHook:
		productBrandBeforeInsertHooks = append(productBrandBeforeInsertHooks, productBrandHook)
	case boil.AfterInsertHook:
		productBrandAfterInsertHooks = append(productBrandAfterInsertHooks, productBrandHook)
	case boil.BeforeUpdateHook:
		productBrandBeforeUpdateHooks = append(productBrandBeforeUpdateHooks, productBrandHook)
	case boil.AfterUpdateHook:
		productBrandAfterUpdateHooks = append(productBrandAfterUpdateHooks, productBrandHook)
	case boil.BeforeDeleteHook:
		productBrandBeforeDeleteHooks = append(productBrandBeforeDeleteHooks, productBrandHook)
	case boil.AfterDeleteHook:
		productBrandAfterDeleteHooks = append(productBrandAfterDeleteHooks, productBrandHook)
	case boil.BeforeUpsertHook:
		productBrandBeforeUpsertHooks = append(productBrandBeforeUpsertHooks, productBrandHook)
	case boil.AfterUpsertHook:
		productBrandAfterUpsertHooks = append(productBrandAfterUpsertHooks, productBrandHook)
	}
}

// One returns a single productBrand record from the query.
func (q productBrandQuery) One(ctx context.Context, exec boil.ContextExecutor) (*ProductBrand, error) {
	o := &ProductBrand{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "db: failed to execute a one query for product_brands")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all ProductBrand records from the query.
func (q productBrandQuery) All(ctx context.Context, exec boil.ContextExecutor) (ProductBrandSlice, error) {
	var o []*ProductBrand

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "db: failed to assign all query results to ProductBrand slice")
	}

	if len(productBrandAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all ProductBrand records in the query.
func (q productBrandQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "db: failed to count product_brands rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q productBrandQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "db: failed to check if product_brands exists")
	}

	return count > 0, nil
}

// Products retrieves all the product's Products with an executor.
func (o *ProductBrand) Products(mods ...qm.QueryMod) productQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"products\".\"product_brand_id\"=?", o.ID),
	)

	return Products(queryMods...)
}

// LoadProducts allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (productBrandL) LoadProducts(ctx context.Context, e boil.ContextExecutor, singular bool, maybeProductBrand interface{}, mods queries.Applicator) error {
	var slice []*ProductBrand
	var object *ProductBrand

	if singular {
		var ok bool
		object, ok = maybeProductBrand.(*ProductBrand)
		if !ok {
			object = new(ProductBrand)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeProductBrand)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeProductBrand))
			}
		}
	} else {
		s, ok := maybeProductBrand.(*[]*ProductBrand)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeProductBrand)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeProductBrand))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &productBrandR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &productBrandR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`products`),
		qm.WhereIn(`products.product_brand_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load products")
	}

	var resultSlice []*Product
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice products")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on products")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for products")
	}

	if len(productAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Products = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &productR{}
			}
			foreign.R.ProductBrand = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.ProductBrandID) {
				local.R.Products = append(local.R.Products, foreign)
				if foreign.R == nil {
					foreign.R = &productR{}
				}
				foreign.R.ProductBrand = local
				break
			}
		}
	}

	return nil
}

// AddProducts adds the given related objects to the existing relationships
// of the product_brand, optionally inserting them as new records.
// Appends related to o.R.Products.
// Sets related.R.ProductBrand appropriately.
func (o *ProductBrand) AddProducts(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Product) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.ProductBrandID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"products\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 0, []string{"product_brand_id"}),
				strmangle.WhereClause("\"", "\"", 0, productPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.ProductBrandID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &productBrandR{
			Products: related,
		}
	} else {
		o.R.Products = append(o.R.Products, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &productR{
				ProductBrand: o,
			}
		} else {
			rel.R.ProductBrand = o
		}
	}
	return nil
}

// SetProducts removes all previously related items of the
// product_brand replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.ProductBrand's Products accordingly.
// Replaces o.R.Products with related.
// Sets related.R.ProductBrand's Products accordingly.
func (o *ProductBrand) SetProducts(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Product) error {
	query := "update \"products\" set \"product_brand_id\" = null where \"product_brand_id\" = ?"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.Products {
			queries.SetScanner(&rel.ProductBrandID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.ProductBrand = nil
		}
		o.R.Products = nil
	}

	return o.AddProducts(ctx, exec, insert, related...)
}

// RemoveProducts relationships from objects passed in.
// Removes related items from R.Products (uses pointer comparison, removal does not keep order)
// Sets related.R.ProductBrand.
func (o *ProductBrand) RemoveProducts(ctx context.Context, exec boil.ContextExecutor, related ...*Product) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.ProductBrandID, nil)
		if rel.R != nil {
			rel.R.ProductBrand = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("product_brand_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.Products {
			if rel != ri {
				continue
			}

			ln := len(o.R.Products)
			if ln > 1 && i < ln-1 {
				o.R.Products[i] = o.R.Products[ln-1]
			}
			o.R.Products = o.R.Products[:ln-1]
			break
		}
	}

	return nil
}

// ProductBrands retrieves all the records using an executor.
func ProductBrands(mods ...qm.QueryMod) productBrandQuery {
	mods = append(mods, qm.From("\"product_brands\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"product_brands\".*"})
	}

	return productBrandQuery{q}
}

// FindProductBrand retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindProductBrand(ctx context.Context, exec boil.ContextExecutor, iD null.Int64, selectCols ...string) (*ProductBrand, error) {
	productBrandObj := &ProductBrand{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"product_brands\" where \"id\"=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, productBrandObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "db: unable to select from product_brands")
	}

	if err = productBrandObj.doAfterSelectHooks(ctx, exec); err != nil {
		return productBrandObj, err
	}

	return productBrandObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *ProductBrand) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("db: no product_brands provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(productBrandColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	productBrandInsertCacheMut.RLock()
	cache, cached := productBrandInsertCache[key]
	productBrandInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			productBrandAllColumns,
			productBrandColumnsWithDefault,
			productBrandColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(productBrandType, productBrandMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(productBrandType, productBrandMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"product_brands\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"product_brands\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "db: unable to insert into product_brands")
	}

	if !cached {
		productBrandInsertCacheMut.Lock()
		productBrandInsertCache[key] = cache
		productBrandInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the ProductBrand.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *ProductBrand) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	productBrandUpdateCacheMut.RLock()
	cache, cached := productBrandUpdateCache[key]
	productBrandUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			productBrandAllColumns,
			productBrandPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("db: unable to update product_brands, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"product_brands\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 0, wl),
			strmangle.WhereClause("\"", "\"", 0, productBrandPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(productBrandType, productBrandMapping, append(wl, productBrandPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to update product_brands row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db: failed to get rows affected by update for product_brands")
	}

	if !cached {
		productBrandUpdateCacheMut.Lock()
		productBrandUpdateCache[key] = cache
		productBrandUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q productBrandQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to update all for product_brands")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to retrieve rows affected for product_brands")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ProductBrandSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("db: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), productBrandPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"product_brands\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, productBrandPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to update all in productBrand slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to retrieve rows affected all in update all productBrand")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *ProductBrand) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("db: no product_brands provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(productBrandColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	productBrandUpsertCacheMut.RLock()
	cache, cached := productBrandUpsertCache[key]
	productBrandUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			productBrandAllColumns,
			productBrandColumnsWithDefault,
			productBrandColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			productBrandAllColumns,
			productBrandPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("db: unable to upsert product_brands, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(productBrandPrimaryKeyColumns))
			copy(conflict, productBrandPrimaryKeyColumns)
		}
		cache.query = buildUpsertQuerySQLite(dialect, "\"product_brands\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(productBrandType, productBrandMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(productBrandType, productBrandMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "db: unable to upsert product_brands")
	}

	if !cached {
		productBrandUpsertCacheMut.Lock()
		productBrandUpsertCache[key] = cache
		productBrandUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single ProductBrand record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *ProductBrand) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("db: no ProductBrand provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), productBrandPrimaryKeyMapping)
	sql := "DELETE FROM \"product_brands\" WHERE \"id\"=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to delete from product_brands")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db: failed to get rows affected by delete for product_brands")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q productBrandQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("db: no productBrandQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to delete all from product_brands")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db: failed to get rows affected by deleteall for product_brands")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ProductBrandSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(productBrandBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), productBrandPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"product_brands\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, productBrandPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to delete all from productBrand slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db: failed to get rows affected by deleteall for product_brands")
	}

	if len(productBrandAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *ProductBrand) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindProductBrand(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ProductBrandSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ProductBrandSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), productBrandPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"product_brands\".* FROM \"product_brands\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, productBrandPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "db: unable to reload all in ProductBrandSlice")
	}

	*o = slice

	return nil
}

// ProductBrandExists checks if the ProductBrand row exists.
func ProductBrandExists(ctx context.Context, exec boil.ContextExecutor, iD null.Int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"product_brands\" where \"id\"=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "db: unable to check if product_brands exists")
	}

	return exists, nil
}

// Exists checks if the ProductBrand row exists.
func (o *ProductBrand) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return ProductBrandExists(ctx, exec, o.ID)
}
