// Code generated by SQLBoiler 4.14.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package db

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// OrderDetail is an object representing the database table.
type OrderDetail struct {
	ID             null.Int64  `boil:"id" json:"id,omitempty" toml:"id" yaml:"id,omitempty"`
	OrderID        null.Int64  `boil:"order_id" json:"order_id,omitempty" toml:"order_id" yaml:"order_id,omitempty"`
	ProductStockID null.Int64  `boil:"product_stock_id" json:"product_stock_id,omitempty" toml:"product_stock_id" yaml:"product_stock_id,omitempty"`
	Price          null.Int64  `boil:"price" json:"price,omitempty" toml:"price" yaml:"price,omitempty"`
	Quantity       null.Int64  `boil:"quantity" json:"quantity,omitempty" toml:"quantity" yaml:"quantity,omitempty"`
	CreatedAt      null.String `boil:"created_at" json:"created_at,omitempty" toml:"created_at" yaml:"created_at,omitempty"`
	UpdatedAt      null.String `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`
	DeletedAt      null.String `boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`

	R *orderDetailR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L orderDetailL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var OrderDetailColumns = struct {
	ID             string
	OrderID        string
	ProductStockID string
	Price          string
	Quantity       string
	CreatedAt      string
	UpdatedAt      string
	DeletedAt      string
}{
	ID:             "id",
	OrderID:        "order_id",
	ProductStockID: "product_stock_id",
	Price:          "price",
	Quantity:       "quantity",
	CreatedAt:      "created_at",
	UpdatedAt:      "updated_at",
	DeletedAt:      "deleted_at",
}

var OrderDetailTableColumns = struct {
	ID             string
	OrderID        string
	ProductStockID string
	Price          string
	Quantity       string
	CreatedAt      string
	UpdatedAt      string
	DeletedAt      string
}{
	ID:             "order_details.id",
	OrderID:        "order_details.order_id",
	ProductStockID: "order_details.product_stock_id",
	Price:          "order_details.price",
	Quantity:       "order_details.quantity",
	CreatedAt:      "order_details.created_at",
	UpdatedAt:      "order_details.updated_at",
	DeletedAt:      "order_details.deleted_at",
}

// Generated where

var OrderDetailWhere = struct {
	ID             whereHelpernull_Int64
	OrderID        whereHelpernull_Int64
	ProductStockID whereHelpernull_Int64
	Price          whereHelpernull_Int64
	Quantity       whereHelpernull_Int64
	CreatedAt      whereHelpernull_String
	UpdatedAt      whereHelpernull_String
	DeletedAt      whereHelpernull_String
}{
	ID:             whereHelpernull_Int64{field: "\"order_details\".\"id\""},
	OrderID:        whereHelpernull_Int64{field: "\"order_details\".\"order_id\""},
	ProductStockID: whereHelpernull_Int64{field: "\"order_details\".\"product_stock_id\""},
	Price:          whereHelpernull_Int64{field: "\"order_details\".\"price\""},
	Quantity:       whereHelpernull_Int64{field: "\"order_details\".\"quantity\""},
	CreatedAt:      whereHelpernull_String{field: "\"order_details\".\"created_at\""},
	UpdatedAt:      whereHelpernull_String{field: "\"order_details\".\"updated_at\""},
	DeletedAt:      whereHelpernull_String{field: "\"order_details\".\"deleted_at\""},
}

// OrderDetailRels is where relationship names are stored.
var OrderDetailRels = struct {
	ProductStock string
	Order        string
	Shipments    string
}{
	ProductStock: "ProductStock",
	Order:        "Order",
	Shipments:    "Shipments",
}

// orderDetailR is where relationships are stored.
type orderDetailR struct {
	ProductStock *ProductStock `boil:"ProductStock" json:"ProductStock" toml:"ProductStock" yaml:"ProductStock"`
	Order        *Order        `boil:"Order" json:"Order" toml:"Order" yaml:"Order"`
	Shipments    ShipmentSlice `boil:"Shipments" json:"Shipments" toml:"Shipments" yaml:"Shipments"`
}

// NewStruct creates a new relationship struct
func (*orderDetailR) NewStruct() *orderDetailR {
	return &orderDetailR{}
}

func (r *orderDetailR) GetProductStock() *ProductStock {
	if r == nil {
		return nil
	}
	return r.ProductStock
}

func (r *orderDetailR) GetOrder() *Order {
	if r == nil {
		return nil
	}
	return r.Order
}

func (r *orderDetailR) GetShipments() ShipmentSlice {
	if r == nil {
		return nil
	}
	return r.Shipments
}

// orderDetailL is where Load methods for each relationship are stored.
type orderDetailL struct{}

var (
	orderDetailAllColumns            = []string{"id", "order_id", "product_stock_id", "price", "quantity", "created_at", "updated_at", "deleted_at"}
	orderDetailColumnsWithoutDefault = []string{}
	orderDetailColumnsWithDefault    = []string{"id", "order_id", "product_stock_id", "price", "quantity", "created_at", "updated_at", "deleted_at"}
	orderDetailPrimaryKeyColumns     = []string{"id"}
	orderDetailGeneratedColumns      = []string{}
)

type (
	// OrderDetailSlice is an alias for a slice of pointers to OrderDetail.
	// This should almost always be used instead of []OrderDetail.
	OrderDetailSlice []*OrderDetail
	// OrderDetailHook is the signature for custom OrderDetail hook methods
	OrderDetailHook func(context.Context, boil.ContextExecutor, *OrderDetail) error

	orderDetailQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	orderDetailType                 = reflect.TypeOf(&OrderDetail{})
	orderDetailMapping              = queries.MakeStructMapping(orderDetailType)
	orderDetailPrimaryKeyMapping, _ = queries.BindMapping(orderDetailType, orderDetailMapping, orderDetailPrimaryKeyColumns)
	orderDetailInsertCacheMut       sync.RWMutex
	orderDetailInsertCache          = make(map[string]insertCache)
	orderDetailUpdateCacheMut       sync.RWMutex
	orderDetailUpdateCache          = make(map[string]updateCache)
	orderDetailUpsertCacheMut       sync.RWMutex
	orderDetailUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var orderDetailAfterSelectHooks []OrderDetailHook

var orderDetailBeforeInsertHooks []OrderDetailHook
var orderDetailAfterInsertHooks []OrderDetailHook

var orderDetailBeforeUpdateHooks []OrderDetailHook
var orderDetailAfterUpdateHooks []OrderDetailHook

var orderDetailBeforeDeleteHooks []OrderDetailHook
var orderDetailAfterDeleteHooks []OrderDetailHook

var orderDetailBeforeUpsertHooks []OrderDetailHook
var orderDetailAfterUpsertHooks []OrderDetailHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *OrderDetail) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range orderDetailAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *OrderDetail) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range orderDetailBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *OrderDetail) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range orderDetailAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *OrderDetail) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range orderDetailBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *OrderDetail) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range orderDetailAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *OrderDetail) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range orderDetailBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *OrderDetail) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range orderDetailAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *OrderDetail) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range orderDetailBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *OrderDetail) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range orderDetailAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddOrderDetailHook registers your hook function for all future operations.
func AddOrderDetailHook(hookPoint boil.HookPoint, orderDetailHook OrderDetailHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		orderDetailAfterSelectHooks = append(orderDetailAfterSelectHooks, orderDetailHook)
	case boil.BeforeInsertHook:
		orderDetailBeforeInsertHooks = append(orderDetailBeforeInsertHooks, orderDetailHook)
	case boil.AfterInsertHook:
		orderDetailAfterInsertHooks = append(orderDetailAfterInsertHooks, orderDetailHook)
	case boil.BeforeUpdateHook:
		orderDetailBeforeUpdateHooks = append(orderDetailBeforeUpdateHooks, orderDetailHook)
	case boil.AfterUpdateHook:
		orderDetailAfterUpdateHooks = append(orderDetailAfterUpdateHooks, orderDetailHook)
	case boil.BeforeDeleteHook:
		orderDetailBeforeDeleteHooks = append(orderDetailBeforeDeleteHooks, orderDetailHook)
	case boil.AfterDeleteHook:
		orderDetailAfterDeleteHooks = append(orderDetailAfterDeleteHooks, orderDetailHook)
	case boil.BeforeUpsertHook:
		orderDetailBeforeUpsertHooks = append(orderDetailBeforeUpsertHooks, orderDetailHook)
	case boil.AfterUpsertHook:
		orderDetailAfterUpsertHooks = append(orderDetailAfterUpsertHooks, orderDetailHook)
	}
}

// One returns a single orderDetail record from the query.
func (q orderDetailQuery) One(ctx context.Context, exec boil.ContextExecutor) (*OrderDetail, error) {
	o := &OrderDetail{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "db: failed to execute a one query for order_details")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all OrderDetail records from the query.
func (q orderDetailQuery) All(ctx context.Context, exec boil.ContextExecutor) (OrderDetailSlice, error) {
	var o []*OrderDetail

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "db: failed to assign all query results to OrderDetail slice")
	}

	if len(orderDetailAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all OrderDetail records in the query.
func (q orderDetailQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "db: failed to count order_details rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q orderDetailQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "db: failed to check if order_details exists")
	}

	return count > 0, nil
}

// ProductStock pointed to by the foreign key.
func (o *OrderDetail) ProductStock(mods ...qm.QueryMod) productStockQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.ProductStockID),
	}

	queryMods = append(queryMods, mods...)

	return ProductStocks(queryMods...)
}

// Order pointed to by the foreign key.
func (o *OrderDetail) Order(mods ...qm.QueryMod) orderQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.OrderID),
	}

	queryMods = append(queryMods, mods...)

	return Orders(queryMods...)
}

// Shipments retrieves all the shipment's Shipments with an executor.
func (o *OrderDetail) Shipments(mods ...qm.QueryMod) shipmentQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"shipments\".\"order_detail_id\"=?", o.ID),
	)

	return Shipments(queryMods...)
}

// LoadProductStock allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (orderDetailL) LoadProductStock(ctx context.Context, e boil.ContextExecutor, singular bool, maybeOrderDetail interface{}, mods queries.Applicator) error {
	var slice []*OrderDetail
	var object *OrderDetail

	if singular {
		var ok bool
		object, ok = maybeOrderDetail.(*OrderDetail)
		if !ok {
			object = new(OrderDetail)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeOrderDetail)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeOrderDetail))
			}
		}
	} else {
		s, ok := maybeOrderDetail.(*[]*OrderDetail)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeOrderDetail)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeOrderDetail))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &orderDetailR{}
		}
		if !queries.IsNil(object.ProductStockID) {
			args = append(args, object.ProductStockID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &orderDetailR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ProductStockID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.ProductStockID) {
				args = append(args, obj.ProductStockID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`product_stocks`),
		qm.WhereIn(`product_stocks.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load ProductStock")
	}

	var resultSlice []*ProductStock
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice ProductStock")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for product_stocks")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for product_stocks")
	}

	if len(productStockAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ProductStock = foreign
		if foreign.R == nil {
			foreign.R = &productStockR{}
		}
		foreign.R.OrderDetails = append(foreign.R.OrderDetails, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.ProductStockID, foreign.ID) {
				local.R.ProductStock = foreign
				if foreign.R == nil {
					foreign.R = &productStockR{}
				}
				foreign.R.OrderDetails = append(foreign.R.OrderDetails, local)
				break
			}
		}
	}

	return nil
}

// LoadOrder allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (orderDetailL) LoadOrder(ctx context.Context, e boil.ContextExecutor, singular bool, maybeOrderDetail interface{}, mods queries.Applicator) error {
	var slice []*OrderDetail
	var object *OrderDetail

	if singular {
		var ok bool
		object, ok = maybeOrderDetail.(*OrderDetail)
		if !ok {
			object = new(OrderDetail)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeOrderDetail)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeOrderDetail))
			}
		}
	} else {
		s, ok := maybeOrderDetail.(*[]*OrderDetail)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeOrderDetail)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeOrderDetail))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &orderDetailR{}
		}
		if !queries.IsNil(object.OrderID) {
			args = append(args, object.OrderID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &orderDetailR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.OrderID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.OrderID) {
				args = append(args, obj.OrderID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`orders`),
		qm.WhereIn(`orders.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Order")
	}

	var resultSlice []*Order
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Order")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for orders")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for orders")
	}

	if len(orderAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Order = foreign
		if foreign.R == nil {
			foreign.R = &orderR{}
		}
		foreign.R.OrderDetails = append(foreign.R.OrderDetails, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.OrderID, foreign.ID) {
				local.R.Order = foreign
				if foreign.R == nil {
					foreign.R = &orderR{}
				}
				foreign.R.OrderDetails = append(foreign.R.OrderDetails, local)
				break
			}
		}
	}

	return nil
}

// LoadShipments allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (orderDetailL) LoadShipments(ctx context.Context, e boil.ContextExecutor, singular bool, maybeOrderDetail interface{}, mods queries.Applicator) error {
	var slice []*OrderDetail
	var object *OrderDetail

	if singular {
		var ok bool
		object, ok = maybeOrderDetail.(*OrderDetail)
		if !ok {
			object = new(OrderDetail)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeOrderDetail)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeOrderDetail))
			}
		}
	} else {
		s, ok := maybeOrderDetail.(*[]*OrderDetail)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeOrderDetail)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeOrderDetail))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &orderDetailR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &orderDetailR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`shipments`),
		qm.WhereIn(`shipments.order_detail_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load shipments")
	}

	var resultSlice []*Shipment
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice shipments")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on shipments")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for shipments")
	}

	if len(shipmentAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Shipments = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &shipmentR{}
			}
			foreign.R.OrderDetail = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.OrderDetailID) {
				local.R.Shipments = append(local.R.Shipments, foreign)
				if foreign.R == nil {
					foreign.R = &shipmentR{}
				}
				foreign.R.OrderDetail = local
				break
			}
		}
	}

	return nil
}

// SetProductStock of the orderDetail to the related item.
// Sets o.R.ProductStock to related.
// Adds o to related.R.OrderDetails.
func (o *OrderDetail) SetProductStock(ctx context.Context, exec boil.ContextExecutor, insert bool, related *ProductStock) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"order_details\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, []string{"product_stock_id"}),
		strmangle.WhereClause("\"", "\"", 0, orderDetailPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.ProductStockID, related.ID)
	if o.R == nil {
		o.R = &orderDetailR{
			ProductStock: related,
		}
	} else {
		o.R.ProductStock = related
	}

	if related.R == nil {
		related.R = &productStockR{
			OrderDetails: OrderDetailSlice{o},
		}
	} else {
		related.R.OrderDetails = append(related.R.OrderDetails, o)
	}

	return nil
}

// RemoveProductStock relationship.
// Sets o.R.ProductStock to nil.
// Removes o from all passed in related items' relationships struct.
func (o *OrderDetail) RemoveProductStock(ctx context.Context, exec boil.ContextExecutor, related *ProductStock) error {
	var err error

	queries.SetScanner(&o.ProductStockID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("product_stock_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.ProductStock = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.OrderDetails {
		if queries.Equal(o.ProductStockID, ri.ProductStockID) {
			continue
		}

		ln := len(related.R.OrderDetails)
		if ln > 1 && i < ln-1 {
			related.R.OrderDetails[i] = related.R.OrderDetails[ln-1]
		}
		related.R.OrderDetails = related.R.OrderDetails[:ln-1]
		break
	}
	return nil
}

// SetOrder of the orderDetail to the related item.
// Sets o.R.Order to related.
// Adds o to related.R.OrderDetails.
func (o *OrderDetail) SetOrder(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Order) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"order_details\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, []string{"order_id"}),
		strmangle.WhereClause("\"", "\"", 0, orderDetailPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.OrderID, related.ID)
	if o.R == nil {
		o.R = &orderDetailR{
			Order: related,
		}
	} else {
		o.R.Order = related
	}

	if related.R == nil {
		related.R = &orderR{
			OrderDetails: OrderDetailSlice{o},
		}
	} else {
		related.R.OrderDetails = append(related.R.OrderDetails, o)
	}

	return nil
}

// RemoveOrder relationship.
// Sets o.R.Order to nil.
// Removes o from all passed in related items' relationships struct.
func (o *OrderDetail) RemoveOrder(ctx context.Context, exec boil.ContextExecutor, related *Order) error {
	var err error

	queries.SetScanner(&o.OrderID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("order_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Order = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.OrderDetails {
		if queries.Equal(o.OrderID, ri.OrderID) {
			continue
		}

		ln := len(related.R.OrderDetails)
		if ln > 1 && i < ln-1 {
			related.R.OrderDetails[i] = related.R.OrderDetails[ln-1]
		}
		related.R.OrderDetails = related.R.OrderDetails[:ln-1]
		break
	}
	return nil
}

// AddShipments adds the given related objects to the existing relationships
// of the order_detail, optionally inserting them as new records.
// Appends related to o.R.Shipments.
// Sets related.R.OrderDetail appropriately.
func (o *OrderDetail) AddShipments(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Shipment) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.OrderDetailID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"shipments\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 0, []string{"order_detail_id"}),
				strmangle.WhereClause("\"", "\"", 0, shipmentPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.OrderDetailID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &orderDetailR{
			Shipments: related,
		}
	} else {
		o.R.Shipments = append(o.R.Shipments, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &shipmentR{
				OrderDetail: o,
			}
		} else {
			rel.R.OrderDetail = o
		}
	}
	return nil
}

// SetShipments removes all previously related items of the
// order_detail replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.OrderDetail's Shipments accordingly.
// Replaces o.R.Shipments with related.
// Sets related.R.OrderDetail's Shipments accordingly.
func (o *OrderDetail) SetShipments(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Shipment) error {
	query := "update \"shipments\" set \"order_detail_id\" = null where \"order_detail_id\" = ?"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.Shipments {
			queries.SetScanner(&rel.OrderDetailID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.OrderDetail = nil
		}
		o.R.Shipments = nil
	}

	return o.AddShipments(ctx, exec, insert, related...)
}

// RemoveShipments relationships from objects passed in.
// Removes related items from R.Shipments (uses pointer comparison, removal does not keep order)
// Sets related.R.OrderDetail.
func (o *OrderDetail) RemoveShipments(ctx context.Context, exec boil.ContextExecutor, related ...*Shipment) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.OrderDetailID, nil)
		if rel.R != nil {
			rel.R.OrderDetail = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("order_detail_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.Shipments {
			if rel != ri {
				continue
			}

			ln := len(o.R.Shipments)
			if ln > 1 && i < ln-1 {
				o.R.Shipments[i] = o.R.Shipments[ln-1]
			}
			o.R.Shipments = o.R.Shipments[:ln-1]
			break
		}
	}

	return nil
}

// OrderDetails retrieves all the records using an executor.
func OrderDetails(mods ...qm.QueryMod) orderDetailQuery {
	mods = append(mods, qm.From("\"order_details\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"order_details\".*"})
	}

	return orderDetailQuery{q}
}

// FindOrderDetail retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindOrderDetail(ctx context.Context, exec boil.ContextExecutor, iD null.Int64, selectCols ...string) (*OrderDetail, error) {
	orderDetailObj := &OrderDetail{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"order_details\" where \"id\"=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, orderDetailObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "db: unable to select from order_details")
	}

	if err = orderDetailObj.doAfterSelectHooks(ctx, exec); err != nil {
		return orderDetailObj, err
	}

	return orderDetailObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *OrderDetail) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("db: no order_details provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		if queries.MustTime(o.UpdatedAt).IsZero() {
			queries.SetScanner(&o.UpdatedAt, currTime)
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(orderDetailColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	orderDetailInsertCacheMut.RLock()
	cache, cached := orderDetailInsertCache[key]
	orderDetailInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			orderDetailAllColumns,
			orderDetailColumnsWithDefault,
			orderDetailColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(orderDetailType, orderDetailMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(orderDetailType, orderDetailMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"order_details\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"order_details\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "db: unable to insert into order_details")
	}

	if !cached {
		orderDetailInsertCacheMut.Lock()
		orderDetailInsertCache[key] = cache
		orderDetailInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the OrderDetail.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *OrderDetail) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	orderDetailUpdateCacheMut.RLock()
	cache, cached := orderDetailUpdateCache[key]
	orderDetailUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			orderDetailAllColumns,
			orderDetailPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("db: unable to update order_details, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"order_details\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 0, wl),
			strmangle.WhereClause("\"", "\"", 0, orderDetailPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(orderDetailType, orderDetailMapping, append(wl, orderDetailPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to update order_details row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db: failed to get rows affected by update for order_details")
	}

	if !cached {
		orderDetailUpdateCacheMut.Lock()
		orderDetailUpdateCache[key] = cache
		orderDetailUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q orderDetailQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to update all for order_details")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to retrieve rows affected for order_details")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o OrderDetailSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("db: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), orderDetailPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"order_details\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, orderDetailPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to update all in orderDetail slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to retrieve rows affected all in update all orderDetail")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *OrderDetail) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("db: no order_details provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(orderDetailColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	orderDetailUpsertCacheMut.RLock()
	cache, cached := orderDetailUpsertCache[key]
	orderDetailUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			orderDetailAllColumns,
			orderDetailColumnsWithDefault,
			orderDetailColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			orderDetailAllColumns,
			orderDetailPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("db: unable to upsert order_details, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(orderDetailPrimaryKeyColumns))
			copy(conflict, orderDetailPrimaryKeyColumns)
		}
		cache.query = buildUpsertQuerySQLite(dialect, "\"order_details\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(orderDetailType, orderDetailMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(orderDetailType, orderDetailMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "db: unable to upsert order_details")
	}

	if !cached {
		orderDetailUpsertCacheMut.Lock()
		orderDetailUpsertCache[key] = cache
		orderDetailUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single OrderDetail record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *OrderDetail) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("db: no OrderDetail provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), orderDetailPrimaryKeyMapping)
	sql := "DELETE FROM \"order_details\" WHERE \"id\"=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to delete from order_details")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db: failed to get rows affected by delete for order_details")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q orderDetailQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("db: no orderDetailQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to delete all from order_details")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db: failed to get rows affected by deleteall for order_details")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o OrderDetailSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(orderDetailBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), orderDetailPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"order_details\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, orderDetailPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to delete all from orderDetail slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db: failed to get rows affected by deleteall for order_details")
	}

	if len(orderDetailAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *OrderDetail) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindOrderDetail(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *OrderDetailSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := OrderDetailSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), orderDetailPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"order_details\".* FROM \"order_details\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, orderDetailPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "db: unable to reload all in OrderDetailSlice")
	}

	*o = slice

	return nil
}

// OrderDetailExists checks if the OrderDetail row exists.
func OrderDetailExists(ctx context.Context, exec boil.ContextExecutor, iD null.Int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"order_details\" where \"id\"=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "db: unable to check if order_details exists")
	}

	return exists, nil
}

// Exists checks if the OrderDetail row exists.
func (o *OrderDetail) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return OrderDetailExists(ctx, exec, o.ID)
}
